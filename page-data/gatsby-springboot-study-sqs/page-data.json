{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/gatsby-springboot-study-sqs/",
    "result": {"data":{"cur":{"id":"15c79342-9c65-5ef6-a7a3-21b9fc21588a","html":"<h2 id=\"-개요\" style=\"position:relative;\"><a href=\"#-%EA%B0%9C%EC%9A%94\" aria-label=\" 개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👀 개요</h2>\n<p>이전 포스팅에서 SQS에 대해서 간단하게 다뤘었다.</p>\n<p>요번에는 SQS를 SPRING BOOT 에서 사용하는 방법을 실습해 보겠다.</p>\n<blockquote>\n<p>❗ SQS에 대해서는 이전 포스팅 참고 <a href=\"https://leesungki.github.io/gatsby-aws-study-sqs/\">SQS란?</a></p>\n</blockquote>\n<blockquote>\n<p>🦺 SQS 대기열 생성 큐 수신,송신에 대해서는 이전 포스팅 참고 <a href=\"https://leesungki.github.io/gatsby-aws-study-sqs-tuto/\">SQS 사용법</a></p>\n</blockquote>\n<h2 id=\"-실습\" style=\"position:relative;\"><a href=\"#-%EC%8B%A4%EC%8A%B5\" aria-label=\" 실습 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖 실습</h2>\n<h3 id=\"-대기열-생성\" style=\"position:relative;\"><a href=\"#-%EB%8C%80%EA%B8%B0%EC%97%B4-%EC%83%9D%EC%84%B1\" aria-label=\" 대기열 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💼 대기열 생성</h3>\n<p>일단 나는 아래 그림처럼 SQS 대기열을 생성했다.\n<img src=\"/31ec1359a1941042f3cee317a8b64414/sqs.png\" alt=\"sqs.PNG\"></p>\n<p>해당 대기열 클릭하여 들어가면 세부정보의 url을 확인 할수있다.\n나중에 사용하기 위해 기억해두자\n<img src=\"/aa35b766164b5f930eabd3564633cb32/sqs1.png\" alt=\"sqs1.PNG\"></p>\n<h3 id=\"-필수-설정하기\" style=\"position:relative;\"><a href=\"#-%ED%95%84%EC%88%98-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\" 필수 설정하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🖋 필수 설정하기</h3>\n<p>의존성 추가</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-aws', version: '2.2.1.RELEASE'\nimplementation group: 'org.springframework.cloud', name: 'spring-cloud-aws-messaging', version: '2.2.3.RELEASE'\nimplementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: '2.5.6'//나중에 메세지 유효성 검사를 위함</code></pre></div>\n<p>프로젝트 구조</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">controller\n    L MainController\nconfig\n    L AmazonSqsConfig\naws\n    L AmazonSQSSender\n    L AmazonSQSSenderImpl\ndto\n    L EcmDto    </code></pre></div>\n<p>application.yml</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">aws</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">credentials</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">access-key</span><span class=\"token punctuation\">:</span> xxxxxx\n      <span class=\"token key atrule\">secret-key</span><span class=\"token punctuation\">:</span> xxxxxx\n    <span class=\"token key atrule\">region</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">static</span><span class=\"token punctuation\">:</span> ap<span class=\"token punctuation\">-</span>northeast<span class=\"token punctuation\">-</span><span class=\"token number\">2</span> <span class=\"token comment\"># AWS SQS의 리전정보</span>\n    <span class=\"token key atrule\">stack</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">auto</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n    <span class=\"token key atrule\">sqs</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">queue</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> MyQueue.fifo\t<span class=\"token comment\"># AWS에서 생성한 Queue 이름</span>\n        <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//sqs.ap<span class=\"token punctuation\">-</span>northeast<span class=\"token punctuation\">-</span>2.amazonaws.com/xxxx/MyQueue.fifo <span class=\"token comment\"># 생성한 SQS 큐 url</span></code></pre></div>\n<p>application.yml 에 aws 관련 정보를 기재해 준다.</p>\n<h3 id=\"-sqs-configuration-클래스-생성\" style=\"position:relative;\"><a href=\"#-sqs-configuration-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%83%9D%EC%84%B1\" aria-label=\" sqs configuration 클래스 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🖊 SQS Configuration 클래스 생성</h3>\n<ul>\n<li>application.yml에 있는 access-key, secret-key 값을 가지고 AWSCredentialsProvider 빈 생성</li>\n<li>Message 송신에 사용되는 AmazonSQS 빈 생성 시 해당 credentials 정보와 region 정보 설정</li>\n<li>Message 수신시 사용되는 Listener 관련 설정</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AmazonSqsConfig</span> <span class=\"token punctuation\">{</span>\n\n\t <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${cloud.aws.credentials.access-key}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> accessKey<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${cloud.aws.credentials.secret-key}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> secretKey<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${cloud.aws.region.static}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> region<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/**\n     * sqs 접근을 위한 위한 사용자 bean\n     */</span>\n    <span class=\"token annotation punctuation\">@Primary</span>\n\t<span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">AmazonSQSAsync</span> <span class=\"token function\">amazonSQSAws</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">BasicAWSCredentials</span> awsCreds <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BasicAWSCredentials</span><span class=\"token punctuation\">(</span>accessKey<span class=\"token punctuation\">,</span> secretKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">AmazonSQSAsyncClientBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">standard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">withRegion</span><span class=\"token punctuation\">(</span>region<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">withCredentials</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">AWSStaticCredentialsProvider</span><span class=\"token punctuation\">(</span>awsCreds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\t\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>AmazonSQSAsyncClientBuilder 를통해 접근 정보를 만들어 준다.</p>\n<h3 id=\"-메세지-dto-생성\" style=\"position:relative;\"><a href=\"#-%EB%A9%94%EC%84%B8%EC%A7%80-dto-%EC%83%9D%EC%84%B1\" aria-label=\" 메세지 dto 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🖌 메세지 Dto 생성</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token annotation punctuation\">@Setter</span>\n<span class=\"token annotation punctuation\">@JsonIgnoreProperties</span><span class=\"token punctuation\">(</span>ignoreUnknown <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EcmDto</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token annotation punctuation\">@NotEmpty</span><span class=\"token punctuation\">(</span>message <span class=\"token operator\">=</span> <span class=\"token string\">\"ecmId값이 빈값입니다.\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> ecmId<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>자신이 메세지를 보낼방식으로 작성하면 된다.</p>\n<h3 id=\"-메세지-전달-서비스-생성\" style=\"position:relative;\"><a href=\"#-%EB%A9%94%EC%84%B8%EC%A7%80-%EC%A0%84%EB%8B%AC-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%83%9D%EC%84%B1\" aria-label=\" 메세지 전달 서비스 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📤 메세지 전달 서비스 생성</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AmazonSQSSenderImpl</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">SendMessageResult</span> <span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EcmDto</span> message<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">JsonProcessingException</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AmazonSQSSender</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AmazonSQSSenderImpl</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${cloud.aws.sqs.queue.url}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> url<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ObjectMapper</span> objectMapper<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">AmazonSQS</span> amazonSQS<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SendMessageResult</span> <span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EcmDto</span> msg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">JsonProcessingException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">SendMessageRequest</span> sendMessageRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SendMessageRequest</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span>\n                objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">writeValueAsString</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">withMessageGroupId</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sqs-test\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">withMessageDeduplicationId</span><span class=\"token punctuation\">(</span>UUID<span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> amazonSQS<span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span>sendMessageRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>SQS에 메세지 보내는 로직을 정의한다.</p>\n<h3 id=\"-테스트용-controller-생성\" style=\"position:relative;\"><a href=\"#-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%9A%A9-controller-%EC%83%9D%EC%84%B1\" aria-label=\" 테스트용 controller 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📫 테스트용 Controller 생성</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainController</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">AmazonSQSSenderImpl</span> amazonSQSSender<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/send\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">EcmDto</span> message<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">JsonProcessingException</span> <span class=\"token punctuation\">{</span>\n        amazonSQSSender<span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"-포스트-맨을-통한-메세지-송신-테스트\" style=\"position:relative;\"><a href=\"#-%ED%8F%AC%EC%8A%A4%ED%8A%B8-%EB%A7%A8%EC%9D%84-%ED%86%B5%ED%95%9C-%EB%A9%94%EC%84%B8%EC%A7%80-%EC%86%A1%EC%8B%A0-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\" 포스트 맨을 통한 메세지 송신 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📈 포스트 맨을 통한 메세지 송신 테스트</h3>\n<p>아래와 같이 요청한다.</p>\n<p><img src=\"/4747485a5915e79b2301573a15bd14db/sqs2.png\" alt=\"sqs2.PNG\"></p>\n<p>sqs 콘솔에서 메세지 폴링해보면 내가 보낸 메세지가 있는걸 확인 할수 있다.\n<img src=\"/667e99292c0db52290559874112ed54a/sqs3.png\" alt=\"sqs3.PNG\"></p>\n<h3 id=\"-메세지-수신-listener-생성\" style=\"position:relative;\"><a href=\"#-%EB%A9%94%EC%84%B8%EC%A7%80-%EC%88%98%EC%8B%A0-listener-%EC%83%9D%EC%84%B1\" aria-label=\" 메세지 수신 listener 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📥 메세지 수신 Listener 생성</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AwsSqsListener</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token annotation punctuation\">@SqsListener</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"${cloud.aws.sqs.queue.name}\"</span><span class=\"token punctuation\">,</span> deletionPolicy <span class=\"token operator\">=</span> <span class=\"token class-name\">SqsMessageDeletionPolicy</span><span class=\"token punctuation\">.</span>NEVER<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Payload</span> <span class=\"token class-name\">String</span> info<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Headers</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> headers<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Acknowledgment</span> ack<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------------------------------start SqsListener\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------------------------------info {}\"</span><span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------------------------------headers {}\"</span><span class=\"token punctuation\">,</span> headers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//수신후 삭제처리</span>\n\t\tack<span class=\"token punctuation\">.</span><span class=\"token function\">acknowledge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>메세지 리스너 작성을 해준다.</p>\n<h3 id=\"-포스트-맨을-통한-메세지-수신-테스트\" style=\"position:relative;\"><a href=\"#-%ED%8F%AC%EC%8A%A4%ED%8A%B8-%EB%A7%A8%EC%9D%84-%ED%86%B5%ED%95%9C-%EB%A9%94%EC%84%B8%EC%A7%80-%EC%88%98%EC%8B%A0-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\" 포스트 맨을 통한 메세지 수신 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📉 포스트 맨을 통한 메세지 수신 테스트</h3>\n<p>아래와 같이 다시 요청한다.</p>\n<p><img src=\"/4747485a5915e79b2301573a15bd14db/sqs2.png\" alt=\"sqs2.PNG\"></p>\n<p>아래처럼 내가 방금 보낸 메세지를 확인할 수 있다.</p>\n<p><img src=\"/f3dddaf2d1fdab6a8c27b0f957acaea9/sqs4.png\" alt=\"sqs4.PNG\"></p>\n<h2 id=\"-마무리\" style=\"position:relative;\"><a href=\"#-%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\" 마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📢 마무리</h2>\n<p>이처럼 springboot에서 sqs에 접근 후 메세지를 보내고 받는기능을 구현해 보았다.</p>\n<p>같은 vpc내의 컨테이너끼리 메세지를 주고받기 굉장히 편한 기능같다.</p>\n<p>실제로 내가 진행한 프로젝트에서도 컨테이너간 간단한 메세지 전송에 사용되었다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EA%B0%9C%EC%9A%94\">👀 개요</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%8B%A4%EC%8A%B5\">📖 실습</a></p>\n<ul>\n<li><a href=\"#-%EB%8C%80%EA%B8%B0%EC%97%B4-%EC%83%9D%EC%84%B1\">💼 대기열 생성</a></li>\n<li><a href=\"#-%ED%95%84%EC%88%98-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\">🖋 필수 설정하기</a></li>\n<li><a href=\"#-sqs-configuration-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%83%9D%EC%84%B1\">🖊 SQS Configuration 클래스 생성</a></li>\n<li><a href=\"#-%EB%A9%94%EC%84%B8%EC%A7%80-dto-%EC%83%9D%EC%84%B1\">🖌 메세지 Dto 생성</a></li>\n<li><a href=\"#-%EB%A9%94%EC%84%B8%EC%A7%80-%EC%A0%84%EB%8B%AC-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%83%9D%EC%84%B1\">📤 메세지 전달 서비스 생성</a></li>\n<li><a href=\"#-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%9A%A9-controller-%EC%83%9D%EC%84%B1\">📫 테스트용 Controller 생성</a></li>\n<li><a href=\"#-%ED%8F%AC%EC%8A%A4%ED%8A%B8-%EB%A7%A8%EC%9D%84-%ED%86%B5%ED%95%9C-%EB%A9%94%EC%84%B8%EC%A7%80-%EC%86%A1%EC%8B%A0-%ED%85%8C%EC%8A%A4%ED%8A%B8\">📈 포스트 맨을 통한 메세지 송신 테스트</a></li>\n<li><a href=\"#-%EB%A9%94%EC%84%B8%EC%A7%80-%EC%88%98%EC%8B%A0-listener-%EC%83%9D%EC%84%B1\">📥 메세지 수신 Listener 생성</a></li>\n<li><a href=\"#-%ED%8F%AC%EC%8A%A4%ED%8A%B8-%EB%A7%A8%EC%9D%84-%ED%86%B5%ED%95%9C-%EB%A9%94%EC%84%B8%EC%A7%80-%EC%88%98%EC%8B%A0-%ED%85%8C%EC%8A%A4%ED%8A%B8\">📉 포스트 맨을 통한 메세지 수신 테스트</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EB%A7%88%EB%AC%B4%EB%A6%AC\">📢 마무리</a></p>\n</li>\n</ul>\n</div>","excerpt":"👀 개요 이전 포스팅에서 SQS에 대해서 간단하게 다뤘었다. 요번에는 SQS를 SPRING BOOT 에서 사용하는 방법을 실습해 보겠다. ❗ SQS에 대해서는 이전 포스팅 참고 SQS란? 🦺 SQS 대기열 생성 큐 수신,송신에 대해서는 이전 포스팅 참고 SQS 사용법 📖 실습 💼 대기열 생성 일단 나는 아래 그림처럼 SQS 대기열을 생성했다.\nsqs.PNG 해당 대기열 클릭하여 들어가면 세부정보의 url을 확인 할수있다.\n나중에 사용하기 위해 기억해두자\nsqs1.PNG 🖋 필수 설정하기 의존성 추가 프로젝트 구조 application.yml application.yml 에 aws 관련 정보를 기재해 준다. 🖊 SQS Configuration 클래스 생성 application.yml에 있는 access-key, secret-key 값을 가지고 AWSCredentialsProvider 빈 생성 Message 송신에 사용되는 AmazonSQS 빈 생성 시 해당 credentials 정보…","frontmatter":{"date":"March 24, 2022","title":"AWS SQS + SPRING BOOT 사용법","categories":"SpringBoot","author":"쩡기","emoji":"👖"},"fields":{"slug":"/gatsby-springboot-study-sqs/"}},"next":{"id":"c7f86eca-c578-56bd-bd13-a58baec44bfa","html":"<h2 id=\"-thymeleaf의-특징\" style=\"position:relative;\"><a href=\"#-thymeleaf%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-label=\" thymeleaf의 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎈 Thymeleaf의 특징</h2>\n<ul>\n<li>서버 사이드 HTML 렌더링</li>\n<li>(SSR) 네츄럴 템플릿</li>\n<li>스프링 통합 지원</li>\n</ul>\n<h3 id=\"-서버-사이드-html-렌더링-ssr\" style=\"position:relative;\"><a href=\"#-%EC%84%9C%EB%B2%84-%EC%82%AC%EC%9D%B4%EB%93%9C-html-%EB%A0%8C%EB%8D%94%EB%A7%81-ssr\" aria-label=\" 서버 사이드 html 렌더링 ssr permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🍕 서버 사이드 HTML 렌더링 (SSR)</h3>\n<ul>\n<li>타임리프는 백엔드 서버에서 HTML을 동적으로 렌더링 하는 용도로 사용된다.</li>\n</ul>\n<h3 id=\"-네츄럴-템플릿\" style=\"position:relative;\"><a href=\"#-%EB%84%A4%EC%B8%84%EB%9F%B4-%ED%85%9C%ED%94%8C%EB%A6%BF\" aria-label=\" 네츄럴 템플릿 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🍔 네츄럴 템플릿</h3>\n<ul>\n<li>\n<p>타임리프는 순수 HTML을 최대한 유지하는 특징이 있다.</p>\n</li>\n<li>\n<p>타임리프로 작성한 파일은 HTML을 유지하기 때문에 웹 브라우저에서 파일을 직접 열어도 내용을 확인할 수 있고, 서버를 통해 뷰 템플릿을 거치면 동적으로 변경된 결과를 확인할 수 있다.</p>\n</li>\n<li>\n<p>JSP를 포함한 다른 뷰 템플릿들은 해당 파일을 열면, 예를 들어서 JSP 파일 자체를 그대로 웹 브라우저에서 열어보면 JSP 소스코드와 HTML이 뒤죽박죽 섞여서 웹 브라우저에서 정상적인 HTML 결과를 확인할 수 없다. 오직 서버를 통해서 JSP가 렌더링 되고 HTML 응답 결과를 받아야 화면을 확인할 수 있다.</p>\n</li>\n<li>\n<p>반면에 타임리프로 작성된 파일은 해당 파일을 그대로 웹 브라우저에서 열어도 정상적인 HTML 결과를 확인할 수 있다. 물론 이 경우 동적으로 결과가 렌더링 되지는 않는다. 하지만 HTML 마크업 결과가 어떻게 되는지 파일만 열어도 바로 확인할 수 있다.</p>\n</li>\n</ul>\n<p>이렇게 <em><strong>순수 HTML을 그대로 유지하면서 뷰 템플릿도 사용할 수 있는 타임리프의 특징을 네츄럴 템플릿</strong></em> (natural templates)이라 한다.</p>\n<h3 id=\"-스프링-통합-지원\" style=\"position:relative;\"><a href=\"#-%EC%8A%A4%ED%94%84%EB%A7%81-%ED%86%B5%ED%95%A9-%EC%A7%80%EC%9B%90\" aria-label=\" 스프링 통합 지원 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🥟 스프링 통합 지원</h3>\n<ul>\n<li>타임리프는 스프링과 자연스럽게 통합되고, 스프링의 다양한 기능을 편리하게 사용할 수 있게 지원한다.</li>\n</ul>\n<p>(이부분은 추후 폼 사용방법에서 자세하게 다룰 예정이다.)</p>\n<h2 id=\"-타임리프-기본-기능\" style=\"position:relative;\"><a href=\"#-%ED%83%80%EC%9E%84%EB%A6%AC%ED%94%84-%EA%B8%B0%EB%B3%B8-%EA%B8%B0%EB%8A%A5\" aria-label=\" 타임리프 기본 기능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🍘 타임리프 기본 기능</h2>\n<p>타임리프를 사용하려면 다음 선언을 하면 된다.</p>\n<h3 id=\"-타임리프-사용-선언\" style=\"position:relative;\"><a href=\"#-%ED%83%80%EC%9E%84%EB%A6%AC%ED%94%84-%EC%82%AC%EC%9A%A9-%EC%84%A0%EC%96%B8\" aria-label=\" 타임리프 사용 선언 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌭 타임리프 사용 선언</h3>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>th</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.thymeleaf.org<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2 id=\"-타임리프-기본-표현식\" style=\"position:relative;\"><a href=\"#-%ED%83%80%EC%9E%84%EB%A6%AC%ED%94%84-%EA%B8%B0%EB%B3%B8-%ED%91%9C%ED%98%84%EC%8B%9D\" aria-label=\" 타임리프 기본 표현식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🍘 타임리프 기본 표현식</h2>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-thymeleaf%EC%9D%98-%ED%8A%B9%EC%A7%95\">🎈 Thymeleaf의 특징</a></p>\n<ul>\n<li><a href=\"#-%EC%84%9C%EB%B2%84-%EC%82%AC%EC%9D%B4%EB%93%9C-html-%EB%A0%8C%EB%8D%94%EB%A7%81-ssr\">🍕 서버 사이드 HTML 렌더링 (SSR)</a></li>\n<li><a href=\"#-%EB%84%A4%EC%B8%84%EB%9F%B4-%ED%85%9C%ED%94%8C%EB%A6%BF\">🍔 네츄럴 템플릿</a></li>\n<li><a href=\"#-%EC%8A%A4%ED%94%84%EB%A7%81-%ED%86%B5%ED%95%A9-%EC%A7%80%EC%9B%90\">🥟 스프링 통합 지원</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%ED%83%80%EC%9E%84%EB%A6%AC%ED%94%84-%EA%B8%B0%EB%B3%B8-%EA%B8%B0%EB%8A%A5\">🍘 타임리프 기본 기능</a></p>\n<ul>\n<li><a href=\"#-%ED%83%80%EC%9E%84%EB%A6%AC%ED%94%84-%EC%82%AC%EC%9A%A9-%EC%84%A0%EC%96%B8\">🌭 타임리프 사용 선언</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%ED%83%80%EC%9E%84%EB%A6%AC%ED%94%84-%EA%B8%B0%EB%B3%B8-%ED%91%9C%ED%98%84%EC%8B%9D\">🍘 타임리프 기본 표현식</a></p>\n</li>\n</ul>\n</div>\n<p>참고:[타임리프_공식_doc](<a href=\"https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#standard-\">https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#standard-</a> expression-syntax)</p>\n<p><strong><em>part 2에서는 위의 소개된 기본 표현식을 직접 사용하여 어떻게 출력이 되는지 알아보겠다.</em></strong> ps.김영한님의 mvc2강의에서…</p>","frontmatter":{"date":"March 24, 2022","title":"Thymeleaf-Basic(part.1 특징과 기본 표현식)","categories":"Thymeleaf","author":"아구","emoji":"🪼"},"fields":{"slug":"/thymeleafBasic/"}},"prev":{"id":"97e6bb29-c8c4-5e4a-b4ae-d6c15edf2ce2","html":"<h2 id=\"-aws-elastic-file-system-란\" style=\"position:relative;\"><a href=\"#-aws-elastic-file-system-%EB%9E%80\" aria-label=\" aws elastic file system 란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎈 AWS Elastic File System 란?</h2>\n<p>AWS EFS는 파일 방식으로 데이터를 저장하는 AWS의 대표 fully-managed file storage 서비스이다.</p>\n<p>파일 스토리지는 일반적으로 OS에서 이용되는 파일 시스템에 사용되는 비교적 친숙한 방식의 스토리지이다.</p>\n<p>AWS EFS가 갖는 주요 특징들을 알아보자.</p>\n<h3 id=\"efs-의-특징\" style=\"position:relative;\"><a href=\"#efs-%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-label=\"efs 의 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>EFS 의 특징</h3>\n<h3>계층적 구조</h3>\n<p>파일 스토리지는 block 혹은 object 방식의 스토리지와 달리, 폴더와 파일로 구성된 계층적 구조를 갖는다.</p>\n<h3>공유 가능</h3>\n<p>AWS EFS는 SAN 방식으로 구현된 AWS EBS와 다르게, NFS(Network File System)를 기반으로 여러 EC2 인스턴스가 동일한 파일 시스템을 공유할 수 있다. AWS EFS는 기본적으로 수 천 여개의 concurrent NFS connection을 지원한다.</p>\n<h3>유연한 확장</h3>\n<p>Elastic 이라는 이름처럼, AWS EFS는 파일이 추가/삭제됨에 따라 스토리지의 용량이 탄력적으로 증가/감소하게 된다. 이러한 특징은 적절한 용량과 IOPS 등을 예측하기 힘든 공유 파일 스토리지를 운영의 번거로움을 크게 줄여줄 뿐만 아니라 비용을 최소화할 수 있다는 장점이 있다.</p>\n<h3>다양한 성능 옵션</h3>\n<p>Throughtput, IOPS 등과 같이 디스크 성능과 관련된 다양한 옵션을 제공한다. 사용자는 어플리케이션의 요구에 맞춘 최적의 file storage를 구성할 수 있다. 주요 옵션으로 General Purpose와 Max I/O 모드를 지원한다. General Purpose모드와 Max I/O 모드는 각각 low-latency와 high throughput &#x26; high IOPS에 최적화 되어있다. 따라서, latency-sensitive한 어플리케이션의 경우 General Purpose, Large-scale and data-heavy 어플리케이션은 Max I/O가 좋은 선택지가 될 수 있다.</p>\n<h3>고가용성</h3>\n<p>AWS EFS는 서로 다른 AZ에 데이터를 복제하는 방식으로 높은 데이터의 안정성과 가용성을 보장한다.</p>\n<h3>보안 정책</h3>\n<p>AWS EFS는 VPC security group과 network ACL을 기반으로 네트워크 정책을 구성할 수 있다. 추가적으로, IAM을 통한 권한 제어가 가능하다. AWS EFS를 마운트한 이후에는 일반적인 파일 시스템과 동일하게 POSIX permission 설정을 지원한다.</p>\n<h3 id=\"architecture\" style=\"position:relative;\"><a href=\"#architecture\" aria-label=\"architecture permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Architecture</h3>\n<p><img src=\"/ed31bad818405d9307c191410704e604/efs1.png\" alt=\"efs1.PNG\"></p>\n<h3>NFS client</h3>\n<p>NFS server에 해당하는 AWS EFS를 마운트하여 사용하는 EC2 인스턴스에 해당한다. NFS client는 mount point를 통해 AWS EFS에 접근할 수 있다. 그림 상에서는 모든 AZ에서 AWS EFS를 사용할 수 있는 것으로 표현되었으나, 실제로는 storage class에 따라서 AWS EFS에 접근할 수 있는 AZ의 수가 제한될 수 있다.</p>\n<h3>Mount target</h3>\n<p>NFS client가 AWS EFS를 마운트하기 위해 필요한 NFSv4 endpoint로 IP 주소와 DNS를 제공한다. Standard storage class를 사용하는 경우, 각 AZ마다 1개의 mount taget을 생성할 수 있다. One Zone storage class를 사용하는 경우, AWS EFS가 위치한 AZ에만 제한적으로 1개의 mount point를 생성할 수 있다.</p>\n<h3>DNS name/ File System ID</h3>\n<p>NFS client가 편리하게 AWS EFS에 접근하기 위해 제공되는 DNS 서비스이다.</p>\n<h2 id=\"-마무리\" style=\"position:relative;\"><a href=\"#-%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\" 마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🧨 마무리</h2>\n<p>이렇게 위와 같은 특징을 가지고 있는 efs를 사용하는 간단한 실습도 진행해 보자.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-aws-elastic-file-system-%EB%9E%80\">🎈 AWS Elastic File System 란?</a></p>\n<ul>\n<li><a href=\"#efs-%EC%9D%98-%ED%8A%B9%EC%A7%95\">EFS 의 특징</a></li>\n<li><a href=\"#architecture\">Architecture</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EB%A7%88%EB%AC%B4%EB%A6%AC\">🧨 마무리</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"March 25, 2022","title":"AWS Elastic File System(EFS) 란?","categories":"AWS","author":"쩡기","emoji":"🎟"},"fields":{"slug":"/gatsby-aws-study-efs/"}},"site":{"siteMetadata":{"siteUrl":"https://leesungki.github.io","comments":{"utterances":{"repo":"LeeSungKi/leesungki.github.io"}}}}},"pageContext":{"slug":"/gatsby-springboot-study-sqs/","nextSlug":"/thymeleafBasic/","prevSlug":"/gatsby-aws-study-efs/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}