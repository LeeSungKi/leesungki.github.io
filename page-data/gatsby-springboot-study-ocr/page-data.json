{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/gatsby-springboot-study-ocr/",
    "result": {"data":{"cur":{"id":"a5cfa938-c9a5-5272-943c-d8de900e3bee","html":"<h2 id=\"개요\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EC%9A%94\" aria-label=\"개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개요</h2>\n<p>이전 포스팅에서 naver crova ocr 에대해 다뤘었다. <a href=\"https://leesungki.github.io/gatsby-naverOCR-study/\">참고</a></p>\n<p>해당 글을 보면 이미 나는 naver ocr api를 생성했고</p>\n<p>요번 글에서는 springboot 에서 해당 api를 사용하는 방법을 포스팅 하겠다.</p>\n<h3 id=\"-multipartform-data-사용\" style=\"position:relative;\"><a href=\"#-multipartform-data-%EC%82%AC%EC%9A%A9\" aria-label=\" multipartform data 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌 multipart/form-data 사용</h3>\n<p>호출 방식은 두가지로 나뉜다 하지만 나는 로컬에 저장된 이미지 파일을 사용 할꺼라서 form-data 방식으로 호출한다.</p>\n<blockquote>\n<p>🎀 다른 방식은 해당 문서 <a href=\"https://api.ncloud-docs.com/docs/ai-application-service-ocr-ocr\">참고</a></p>\n</blockquote>\n<p>프로젝트 구조</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">controller\r\n    ㄴCheckController\r\ninfra\r\n    ㄴnaver\r\n        ㄴocr\r\n            ㄴNaverOcrApi\r\nutill\r\n    ㄴJsonUtill           </code></pre></div>\n<ul>\n<li>CheckController</li>\n<li>NaverOcrApi</li>\n<li>JsonUtill : 데이터 가공을위함 필수 X</li>\n</ul>\n<p>Json 관련 의존성은 기재 안하겠다 본인이 가공할거면 편한걸 사용하면 된다.</p>\n<p>NaverOcrApi</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">/**\r\n * Naver OCR API Service (네이버 ocr api 호출)\r\n */</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NaverOcrApi</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\">/**\r\n     * 네이버 ocr api 호출한다\r\n     * @param {string} type 호출 메서드 타입\r\n     * @param {string} filePath 파일 경로\r\n     * @param {string} naver_secretKey 네이버 시크릿키 값\r\n     * @param {string} ext 확장자\r\n     * @returns {List} 추출 text list\r\n     */</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">callApi</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> type<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> filePath<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> naver_secretKey<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> ext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\">String</span> apiURL <span class=\"token operator\">=</span> <span class=\"token string\">\"자신이 생성한 APIGW URL\"</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">String</span> secretKey <span class=\"token operator\">=</span> naver_secretKey<span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">String</span> imageFile <span class=\"token operator\">=</span> filePath<span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> parseData <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\r\n\r\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token class-name\">URL</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>apiURL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token class-name\">HttpURLConnection</span> con <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpURLConnection</span><span class=\"token punctuation\">)</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">openConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            con<span class=\"token punctuation\">.</span><span class=\"token function\">setUseCaches</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            con<span class=\"token punctuation\">.</span><span class=\"token function\">setDoInput</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            con<span class=\"token punctuation\">.</span><span class=\"token function\">setDoOutput</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            con<span class=\"token punctuation\">.</span><span class=\"token function\">setReadTimeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">30000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            con<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestMethod</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token class-name\">String</span> boundary <span class=\"token operator\">=</span> <span class=\"token string\">\"----\"</span> <span class=\"token operator\">+</span> UUID<span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            con<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"multipart/form-data; boundary=\"</span> <span class=\"token operator\">+</span> boundary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            con<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"X-OCR-SECRET\"</span><span class=\"token punctuation\">,</span> secretKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n            <span class=\"token class-name\">JSONObject</span> json <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            json<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"version\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"V2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            json<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"requestId\"</span><span class=\"token punctuation\">,</span> UUID<span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            json<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timestamp\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token class-name\">JSONObject</span> image <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            image<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"format\"</span><span class=\"token punctuation\">,</span> ext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            image<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"demo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token class-name\">JSONArray</span> images <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JSONArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            images<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            json<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"images\"</span><span class=\"token punctuation\">,</span> images<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token class-name\">String</span> postParams <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n            con<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token class-name\">DataOutputStream</span> wr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataOutputStream</span><span class=\"token punctuation\">(</span>con<span class=\"token punctuation\">.</span><span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token keyword\">long</span> start <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>imageFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token function\">writeMultiPart</span><span class=\"token punctuation\">(</span>wr<span class=\"token punctuation\">,</span> postParams<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">,</span> boundary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            wr<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n            <span class=\"token keyword\">int</span> responseCode <span class=\"token operator\">=</span> con<span class=\"token punctuation\">.</span><span class=\"token function\">getResponseCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token class-name\">BufferedReader</span> br<span class=\"token punctuation\">;</span>\r\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>responseCode <span class=\"token operator\">==</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n                br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span>con<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\r\n                br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span>con<span class=\"token punctuation\">.</span><span class=\"token function\">getErrorStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span>\r\n            <span class=\"token class-name\">String</span> inputLine<span class=\"token punctuation\">;</span>\r\n            <span class=\"token class-name\">StringBuffer</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>inputLine <span class=\"token operator\">=</span> br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n                response<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>inputLine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span>\r\n            br<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n            parseData <span class=\"token operator\">=</span> <span class=\"token function\">jsonparse</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n        <span class=\"token keyword\">return</span> parseData<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token comment\">/**\r\n     * writeMultiPart\r\n     * @param {OutputStream} out 데이터를 출력\r\n     * @param {string} jsonMessage 요청 params\r\n     * @param {File} file 요청 파일\r\n     * @param {String} boundary 경계\r\n     */</span>\r\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">writeMultiPart</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OutputStream</span> out<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> jsonMessage<span class=\"token punctuation\">,</span> <span class=\"token class-name\">File</span> file<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> boundary<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span>\r\n            <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\">StringBuilder</span> sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>boundary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Disposition:form-data; name=\\\"message\\\"\\r\\n\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>jsonMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n        out<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>sb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        out<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>file <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">isFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            out<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--\"</span> <span class=\"token operator\">+</span> boundary <span class=\"token operator\">+</span> <span class=\"token string\">\"\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token class-name\">StringBuilder</span> fileString <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            fileString\r\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Disposition:form-data; name=\\\"file\\\"; filename=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            fileString<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\"\"</span> <span class=\"token operator\">+</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\\"\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            fileString<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type: application/octet-stream\\r\\n\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            out<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>fileString<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            out<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">FileInputStream</span> fis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n                <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">8192</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n                <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span>\r\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">=</span> fis<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n                    out<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                <span class=\"token punctuation\">}</span>\r\n                out<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\r\\n\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span>\r\n\r\n            out<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--\"</span> <span class=\"token operator\">+</span> boundary <span class=\"token operator\">+</span> <span class=\"token string\">\"--\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n        out<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token comment\">/**\r\n     * 데이터 가공\r\n     * @param {StringBuffer} response 응답값\r\n     * @returns {List} result text list\r\n     */</span>\r\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">jsonparse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringBuffer</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ParseException</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token comment\">//json 파싱</span>\r\n        <span class=\"token class-name\">JSONParser</span> jp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JSONParser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">JSONObject</span> jobj <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">)</span> jp<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token comment\">//images 배열 obj 화</span>\r\n        <span class=\"token class-name\">JSONArray</span> <span class=\"token class-name\">JSONArrayPerson</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">JSONArray</span><span class=\"token punctuation\">)</span>jobj<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"images\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">JSONObject</span> <span class=\"token class-name\">JSONObjImage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">JSONArrayPerson</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">JSONArray</span> s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">JSONArray</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">JSONObjImage</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fields\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token comment\">//</span>\r\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> m <span class=\"token operator\">=</span> <span class=\"token class-name\">JsonUtill</span><span class=\"token punctuation\">.</span><span class=\"token function\">getListMapFromJsonArray</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> as <span class=\"token operator\">:</span> m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> as<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"inferText\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>JsonUtill</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JsonUtill</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\">/**\r\n     * JSONObject => Map&lt;String, String>\r\n     * @param {JSONObject} jsonObject\r\n     * @returns {Map} map\r\n     */</span>\r\n    <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getMapFromJsonObject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JSONObject</span> jsonObject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\r\n            map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">readValue</span><span class=\"token punctuation\">(</span>jsonObject<span class=\"token punctuation\">.</span><span class=\"token function\">toJSONString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">JsonParseException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">JsonMappingException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n        <span class=\"token keyword\">return</span> map<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token comment\">/**\r\n     * JSONArray => List&lt;Map&lt;String, String>>\r\n     * @param {jsonArray} jsonArray\r\n     * @returns {List} list\r\n     */</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getListMapFromJsonArray</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JSONArray</span> jsonArray<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\r\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>jsonArray <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\r\n            <span class=\"token keyword\">int</span> jsonSize <span class=\"token operator\">=</span> jsonArray<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> jsonSize<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\r\n                <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token function\">getMapFromJsonObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">)</span>jsonArray<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n            <span class=\"token punctuation\">}</span>\r\n        <span class=\"token punctuation\">}</span>\r\n        <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>CheckController</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RestController</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CheckController</span> <span class=\"token punctuation\">{</span>\r\n     <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/naverOcr\"</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ResponseEntity</span> <span class=\"token function\">ocr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span>  <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\">String</span> fileName <span class=\"token operator\">=</span> <span class=\"token string\">\"mey.jpg\"</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token class-name\">ResourceUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"classpath:static/image/test/\"</span><span class=\"token operator\">+</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">NaverOcrApi</span><span class=\"token punctuation\">.</span><span class=\"token function\">callApi</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"자신의 네이버 시크릿 키\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"-postman-호출\" style=\"position:relative;\"><a href=\"#-postman-%ED%98%B8%EC%B6%9C\" aria-label=\" postman 호출 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🏆 Postman 호출</h3>\n<p><img src=\"/302c89cc1ee62f565a1ccd0defc1c0a7/springbootocr.png\" alt=\"springbootocr.PNG\"></p>\n<p>이렇게 내가 원하는 이미지의 텍스트를 추출 할수가 있다.</p>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌭마무리</h2>\n<p>생각보다 문서도 잘되어있고… 내가 굳이 따로 글을 쓸필요가 있을까 싶을정도 이지만…</p>\n<p>그래도 나중에 내가 다시 사용할때 어떻게 사용했는지 알기위해 이 글을 쓴다..</p>\n<p>외부 api 사용은 정말 해당 api를 제공하는 제공측의 문서의 퀄리티에 따라서 사용 난이도가 변하는거 같다..</p>\n<p>그런 부분에서 네이버는 역시 대기업이구나 라는걸 다시한번 느꼈다..</p>\n<br>\r\n<br>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EA%B0%9C%EC%9A%94\">개요</a></p>\n<ul>\n<li><a href=\"#-multipartform-data-%EC%82%AC%EC%9A%A9\">📌 multipart/form-data 사용</a></li>\n<li><a href=\"#-postman-%ED%98%B8%EC%B6%9C\">🏆 Postman 호출</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\">🌭마무리</a></p>\n</li>\n</ul>\n</div>","excerpt":"개요 이전 포스팅에서 naver crova ocr 에대해 다뤘었다. 참고 해당 글을 보면 이미 나는 naver ocr api를 생성했고 요번 글에서는 springboot 에서 해당 api를 사용하는 방법을 포스팅 하겠다. 📌 multipart/form-data 사용 호출 방식은 두가지로 나뉜다 하지만 나는 로컬에 저장된 이미지 파일을 사용 할꺼라서 form-data 방식으로 호출한다. 🎀 다른 방식은 해당 문서 참고 프로젝트 구조 CheckController NaverOcrApi JsonUtill : 데이터 가공을위함 필수 X Json 관련 의존성은 기재 안하겠다 본인이 가공할거면 편한걸 사용하면 된다. NaverOcrApi JsonUtill CheckController 🏆 Postman 호출 springbootocr.PNG 이렇게 내가 원하는 이미지의 텍스트를 추출 할수가 있다. 🌭마무리 생각보다 문서도 잘되어있고… 내가 굳이 따로 글을 쓸필요가 있을까 싶을정도 이지만… 그래도 …","frontmatter":{"date":"March 08, 2022","title":"SpringBoot + naver crova ocr 사용","categories":"SpringBoot","author":"쩡기","emoji":"🏳"},"fields":{"slug":"/gatsby-springboot-study-ocr/"}},"next":{"id":"b8e2e6fd-de56-5941-8d68-6fa4b6e29d20","html":"<h2 id=\"-개요\" style=\"position:relative;\"><a href=\"#-%EA%B0%9C%EC%9A%94\" aria-label=\" 개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✨ 개요</h2>\n<p>내가 진행 했던 프로젝트 에서 네이버 클라우드 플렛폼에서 지원하는 OCR API를 사용하여 이미지의 텍스트를 추출하는 작업을 담당 했었고</p>\n<p>해당 작업을 정리하기 위해 포스팅을 하려 한다.</p>\n<h2 id=\"-ocr\" style=\"position:relative;\"><a href=\"#-ocr\" aria-label=\" ocr permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👓 OCR?</h2>\n<p>OCR(Optical character recognition, 광학 문자 인식)은 이미지(사진) 속 글자 위치를 찾고 어떤 글자인지 자동으로 알아내는 기술입니다.</p>\n<p>OCR은 다양한 형태의 글자를 이해하기 위해 독자적인 글자 영역 검출 및 인식 기술을 보유하고 있습니다.</p>\n<p>또한 손쉽게 템플릿을 만들고 원하는 영역을 지정한 뒤, 필요한 글자만 빠르게 추출하는 기능을 제공합니다.</p>\n<h3 id=\"-naver-clova-ocr-\" style=\"position:relative;\"><a href=\"#-naver-clova-ocr-\" aria-label=\" naver clova ocr  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📷 Naver CLOVA OCR ?</h3>\n<p>CLOVA OCR 서비스는 네이버의 AI 기술을 활용하여 주요 비즈니스 활용에 최적화된 고성능 OCR 인식 모델을 적용하였습니다.</p>\n<p>문자 인식이 제공되는 언어는 한국어, 영어, 일본어이며, 필기체 인식은 한국어와 일본어가 지원됩니다.</p>\n<p>CLOVA OCR은 문서 레이아웃 분석 및 글자를 읽는 순서 방향을 추정하여 둥글게 곡선으로 배열되거나 기울어진 문자, 필기체 인식 등 고성능 AI 모델바탕으로 높은 수준의 정확도를 제공합니다.</p>\n<p>OCR분야 가장 권위있는 글로벌 챌린지ICDAR2019 4개 분야에서 1위, CVPR 및 ICCV 국제학회 논문 선정 등 독보적기술력이 집약된 CLOVA OCR을 네이버 클라우드 플랫폼을 통해 손쉽게 이용할 수 있습니다</p>\n<blockquote>\n<p>🎫 네이버 에서 제공하는 기능에 대한 부분은 공식 문서를 참고하자. <a href=\"https://www.ncloud.com/product/aiService/ocr\">출처</a></p>\n</blockquote>\n<h4 id=\"-clova-ocr-사용-가이드\" style=\"position:relative;\"><a href=\"#-clova-ocr-%EC%82%AC%EC%9A%A9-%EA%B0%80%EC%9D%B4%EB%93%9C\" aria-label=\" clova ocr 사용 가이드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎏 CLOVA OCR 사용 가이드</h4>\n<ol>\n<li>CLOVA OCR 사용하기</li>\n</ol>\n<p><a href=\"https://console.ncloud.com/dashboard\">콘솔</a>에 접속 후 아래의 단계를 거쳐 쉽게 서비스를 이용할 수 있습니다.</p>\n<ul>\n<li>Step 1. 서비스 이용 신청 및 약관 동의</li>\n<li>Step 2. 도메인 생성</li>\n<li>Step 3. 템플릿 생성</li>\n<li>Step 4. 테스트 및 분석</li>\n<li>Step 5. 컴포넌트</li>\n<li>Step 6. 설정</li>\n<li>Step 7. 배포 관리</li>\n</ul>\n<p>Step 1. 서비스 이용 신청 및 약관 동의</p>\n<p>CLOVA OCR 서비스를 이용하기 위해서는 이용 신청 및 약관 동의가 필요합니다.</p>\n<blockquote>\n<p><a href=\"https://www.ncloud.com/product/aiService/ocr\">바로가기</a> 해당 페이지 접속후 이용 신청하기 클릭</p>\n</blockquote>\n<p><img src=\"/425f95c78a7066cb228f8623e25065fc/OCR.png\" alt=\"OCR.PNG\"></p>\n<p>[상품 이용신청] 버튼을 클릭하여 약관에 동의한 후 다음 단계로 이동합니다.</p>\n<p><img src=\"/97e9521723dbeb9a4a7e18c87c606824/OCR1.png\" alt=\"OCR1.PNG\"></p>\n<p>Step 2. 도메인 생성</p>\n<p>본격적으로 CLOVA OCR 서비스를 제작하기 위해 도메인을 생성합니다.</p>\n<p>콘솔에서 Domain 클릭후 도메인 생성 클릭</p>\n<p><img src=\"/4a3512fa3ba9973599cff877b35c453a/OCR2.png\" alt=\"OCR2.PNG\"></p>\n<p><img src=\"/c38428b052152d685008c1b31417fe0d/OCR3.png\" alt=\"OCR3.PNG\"></p>\n<p>도메인 생성이 완료되면 도메인 목록을 확인할 수 있습니다. 텍스트 추출만 가능한 General 도메인은 ‘Text OCR’(API Gateway 연동), ‘Demo’(Table 자동 추출 제공) 버튼이 동작 메뉴에 나타나고 Template 도메인의 경우 ‘템플릿 빌더’ 실행 버튼이 노출됩니다.</p>\n<p>선택한 도메인의 동작 메뉴에서 템플릿 빌더 버튼을 클릭하면 도메인 정보를 확인할 수 있고 새로운 창에서 OCR 빌더가 실행됩니다.</p>\n<p><img src=\"/32dec9c7a9149bcd1f6e3c6f59ed111c/OCR4.png\" alt=\"OCR4.PNG\"></p>\n<p>동작 메뉴에서 Text OCR 버튼을 클릭하면, 템플릿 설정 없이 전체 텍스트만 추출 가능한 General OCR 연동 설정 pop-up 창이 노출되고 Custom API Gateway 설정을 통해 자동 연동이 가능합니다.</p>\n<p><img src=\"/b0b7f263f3462c0c1e17f834d9b29afe/OCR5.png\" alt=\"OCR5.PNG\"></p>\n<p>Custom API Gateway 연동</p>\n<ul>\n<li>Text OCR 버튼 클릭 시 외부 주소와 연동 설정이 가능한 창이 노출됩니다.</li>\n<li>OCR Invoke URL은 외부 연동 Endpoint에 입력할 OCR API 주소를 의미합니다.</li>\n<li>API Gateway 이용 신청이 되어 있는 경우, 자동 연동 (Interlock) 버튼을 클릭해 손쉽게 자동 연동할 수 있습니다.</li>\n</ul>\n<p>자세한 내용은 공식 가이드 문서 <a href=\"https://guide.ncloud-docs.com/docs/ocr-ocr-1-1\">참고</a></p>\n<p>위의 내용은 간략한 가이드 이다 꼭 공식 가이드 문서를 참고하자</p>\n<p>나는 도메인을 생성해준 다음 자동 APIGW 연동을 해주었다.</p>\n<p>그렇게 해주면 아래와 같이 생성된 Secret Key를 통해 APIGW Invoke URL을 호출하면 사용할 수 있습니다.</p>\n<p><img src=\"/ff86609b7dda85e496690bb9341f9437/OCR6.png\" alt=\"OCR6.PNG\"></p>\n<h4 id=\"-clova-ocr-api--호출-가이드\" style=\"position:relative;\"><a href=\"#-clova-ocr-api--%ED%98%B8%EC%B6%9C-%EA%B0%80%EC%9D%B4%EB%93%9C\" aria-label=\" clova ocr api  호출 가이드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎨 CLOVA OCR API  호출 가이드</h4>\n<p>CLOVA OCR API 호출 방법</p>\n<p>Step 1. API 환경 설정하기</p>\n<p>OCR 빌더에서 만든 도메인은 고유한 InvokeURL이 있습니다.</p>\n<p>이 InvokeURL은 안전한 서비스를 위해 외부 서비스에 바로 공개되지 않습니다. 그리고 보안 및 서비스 처리 수준을 높이기 위해서 API Gateway 상품에 연동하여 사용하도록 설계되어 있습니다.</p>\n<p>Step 2. 자동으로 API Gateway 연동하기</p>\n<p>API Gateway와 연동하는 방법에는 자동과 수동이 있으며, 자동연동 기능을 선택하시면 몇 번의 클릭으로 쉽게 API Gateway 연동을 완료하실 수 있습니다.</p>\n<p>이 단계에서는 Secret Key 와 OCR Invoke URL을 생성합니다.</p>\n<ul>\n<li>Text OCR 사용하기</li>\n</ul>\n<p><img src=\"/b66c5600045ee0ccdefd86c75186907c/OCR7.png\" alt=\"OCR7.PNG\"></p>\n<ul>\n<li>Secret Key를 생성합니다.</li>\n<li>APIGW 자동연동 버튼을 클릭합니다.</li>\n</ul>\n<p><img src=\"/f6a57a3bdadf986b6dff0032d63b9dfa/OCR8.png\" alt=\"OCR8.PNG\">\r\nAPI Gateway 서비스의 이용 신청이 되어 있지 않다면, 먼저 신청을 완료해야 합니다.\r\n<img src=\"/28d8dea80b7c890a220e855b379cff6f/OCR9.png\" alt=\"OCR9.PNG\"></p>\n<p>APIGW 연동이 완료되었습니다.</p>\n<p>중요한 정보인 Secret Key 와 OCR Invoke URL 값을 복사해 놓습니다.</p>\n<ul>\n<li>Secret Key : {X-OCR-SECRET}</li>\n<li>OCR Invoke URL : {OCR Invoke URL}</li>\n</ul>\n<p>Step 3. API Gateway 생성 URL 확인하기</p>\n<p>콘솔에서 API Gateway 상품으로 이동합니다.</p>\n<p>My Products에 OCR_CUSTOM_API_KR 이라는 Product가 생성되어 있습니다.</p>\n<p><img src=\"/fb5d24b3083a0f400929ff90590f5e79/OCR10.png\" alt=\"OCR10.PNG\"></p>\n<p><img src=\"/01ef924fcbc39bcf0582a8539b772ba3/OCR11.png\" alt=\"OCR11.PNG\"></p>\n<p>여기까지 정상적으로 표시되었다면, API 호출 준비가 완료되었습니다.</p>\n<p>Step 4. Postman으로 API 호출해 보기 (TEXT OCR)</p>\n<p>Text OCR API를 실행할 경우 업로드 된 이미지의 텍스트 추출이 가능합니다.</p>\n<p>Postman에서 새로운 API를 생성하고 호출방식을 POST로 설정합니다.</p>\n<p>Invoke URL 주소에 OCR에서 생성한 API Gateway의 InvokeURL을 입력합니다.</p>\n<p><img src=\"/94d034afa8799ea1dffbd00644e16fd3/OCR12.png\" alt=\"OCR12.PNG\"></p>\n<p>Header 항목에 아래와 같이 X-OCR-SECRET 정보를 입력합니다.</p>\n<p>Content-Type : application/json</p>\n<p>X-OCR-SECRET : {X-OCR-SECRET }</p>\n<p><img src=\"/4fd99246bf11abcfbd5b63991d14735d/OCR13.png\" alt=\"OCR13.PNG\"></p>\n<p>TEXT OCR 호출 BODY는 이미지 인식 요청 BODY 의 형식으로 넣습니다.</p>\n<p>자세한 이미지 인식 요청 형식은 API 참조서를 확인해주세요</p>\n<p>Request Body:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\r\n    <span class=\"token property\">\"images\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\r\n      <span class=\"token punctuation\">{</span>\r\n        <span class=\"token property\">\"format\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"png\"</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"medium\"</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://kr.object.ncloudstorage.com/ocr-img/OCR_ko(1)REAN_ko(1).png\"</span>\r\n      <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token property\">\"lang\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ko\"</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token property\">\"requestId\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token property\">\"resultType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token property\">\"timestamp\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>$timestamp<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"V1\"</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"/2dfb4913cdcacea89a98c01f501ecb23/OCR14.png\" alt=\"OCR14.PNG\"></p>\n<p>SEND 버튼을 눌러서 응답을 확인합니다.</p>\n<p><img src=\"/081c6fd99b41ce1f97ae5df324146519/OCR15.png\" alt=\"OCR15.PNG\"></p>\n<p>OCR 요청 방식은 <a href=\"https://api.ncloud-docs.com/docs/ai-application-service-ocr-ocr\">여기</a>에서 확인</p>\n<h2 id=\"-마무리\" style=\"position:relative;\"><a href=\"#-%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\" 마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎍 마무리</h2>\n<p>기본적인 OCR 사용 방법을 기재해 보았다.</p>\n<p>사실 가이드 문서에 이미 잘정리되어 있는 내용이라서 딱히 내가 추가적으로 기재할필요가 없다고 생각하나</p>\n<p>이다음 포스팅에서는 스프링 부트에서 해당 OCR API 연동 및 사용 방법을 기록 하기 위해 간략히 OCR 가이드 방법을 기록 하였다.</p>\n<br>\r\n<br>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EA%B0%9C%EC%9A%94\">✨ 개요</a></p>\n</li>\n<li>\n<p><a href=\"#-ocr\">👓 OCR?</a></p>\n<ul>\n<li>\n<p><a href=\"#-naver-clova-ocr-\">📷 Naver CLOVA OCR ?</a></p>\n<ul>\n<li><a href=\"#-clova-ocr-%EC%82%AC%EC%9A%A9-%EA%B0%80%EC%9D%B4%EB%93%9C\">🎏 CLOVA OCR 사용 가이드</a></li>\n<li><a href=\"#-clova-ocr-api--%ED%98%B8%EC%B6%9C-%EA%B0%80%EC%9D%B4%EB%93%9C\">🎨 CLOVA OCR API  호출 가이드</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EB%A7%88%EB%AC%B4%EB%A6%AC\">🎍 마무리</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"March 08, 2022","title":"NAVER cloud OCR API 사용 방법","categories":"NAVERCLOUD","author":"쩡기","emoji":"🔍"},"fields":{"slug":"/gatsby-naverOCR-study/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://leesungki.github.io","comments":{"utterances":{"repo":"LeeSungKi/leesungki.github.io"}}}}},"pageContext":{"slug":"/gatsby-springboot-study-ocr/","nextSlug":"/gatsby-naverOCR-study/","prevSlug":""}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}