{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/springbootStudyS3Service/",
    "result": {"data":{"cur":{"id":"b9174fec-3df8-5d8f-b2e9-18d78294a46e","html":"<h2 id=\"-개요\" style=\"position:relative;\"><a href=\"#-%EA%B0%9C%EC%9A%94\" aria-label=\" 개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👀 개요</h2>\n<p>이전 포스팅에서 S3에 대해서 간단하게 다뤘었다.</p>\n<p>요번에는 S3에 파일을 올리는 과정을 포스팅하려 한다.</p>\n<blockquote>\n<p>❗ S3에 대해서는 이전 포스팅 참고 <a href=\"https://leesungki.github.io/gatsby-aws-study-s3/\">S3란?</a></p>\n</blockquote>\n<blockquote>\n<p>🦺 S3 버킷 생성에 대해서는 이전 포스팅 참고 <a href=\"https://leesungki.github.io/gatsby-aws-study-s3/\">S3 버킷 생성</a></p>\n</blockquote>\n<h2 id=\"-s3-파일-업로드\" style=\"position:relative;\"><a href=\"#-s3-%ED%8C%8C%EC%9D%BC-%EC%97%85%EB%A1%9C%EB%93%9C\" aria-label=\" s3 파일 업로드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🗑 S3 파일 업로드</h2>\n<ol>\n<li>버킷 생성</li>\n</ol>\n<p>일단 나는 아래 그림처럼 file-upload-test-lee라는 명칭으로 퍼블릭한 버킷을 하나 생성했다.\r\n<img src=\"/91144b0038b8571eb5bb57e1d78b64ea/springboots3.png\" alt=\"springboots3.PNG\"></p>\n<p>해당 버킷을 클릭하여 들어가면 아무런 객체도 없는 상태이다.\r\n<img src=\"/5e4d4a4ec6b71456c81895fe10675c62/springboots31.png\" alt=\"springboots31.PNG\"></p>\n<p>그리고 iam 권한에 사용자에게 S3 FullAccess 권한을 부여해야 합니다. (이것이 있어야 S3에 파일 업로드를 할 수 있습니다.)</p>\n<p>일단 aws 상에서의 작업은 이 정도만 해주면 된다.</p>\n<p>이제 실제 애플리케이션에서 aws s3 서비스를 구현해 보자.</p>\n<ol start=\"2\">\n<li>AmazonS3ClientBuilder 를 사용한 업로드 구현</li>\n</ol>\n<p>의존성 추가</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-aws', version: '2.2.5.RELEASE'</code></pre></div>\n<p>프로젝트 구조</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">common\r\n    ㄴconfig\r\n        ㄴAmazonS3Config\r\ncontroller\r\n    ㄴCheckController\r\naws\r\n    ㄴAwsSecret\r\n    ㄴSecretManagerBuild\r\nservice\r\n    ㄴS3Service   \r\nresources\r\n    ㄴapplication.yml\r\n    ㄴstatic.image.test\r\n        ㄴmey.jpg      </code></pre></div>\n<ul>\n<li>AmazonS3Config</li>\n<li>CheckController</li>\n<li>AwsSecret</li>\n<li>SecretManagerBuild</li>\n<li>S3Service</li>\n<li>application</li>\n<li>mey.jpg: 로컬 테스트용 이미지파일을 넣어줬다.</li>\n</ul>\n<p>먼저 나는 s3에 접근하기 위해 필요한 사용자의 정보를 secretmanager를 통해 받아올 것이기 때문에 위와 같이 구조를 만들어 주었다.</p>\n<p>해당 부분에 대해서는 이전 포스팅을 참고 하자.</p>\n<p><a href=\"https://leesungki.github.io/gatsby-springboot-study-secretsManager/\">참고</a></p>\n<p>application.yml</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">secret</span><span class=\"token punctuation\">:</span>\r\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token comment\">#_dev arn</span>\r\n    <span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#시크릿 매니저 arn</span>\r\n    <span class=\"token key atrule\">crawler</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#시크릿 매니저 arn</span>\r\n    <span class=\"token key atrule\">ecm</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#시크릿 매니저 arn</span>\r\n<span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span>\r\n  <span class=\"token key atrule\">aws</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token key atrule\">region</span><span class=\"token punctuation\">:</span>\r\n      <span class=\"token key atrule\">static</span><span class=\"token punctuation\">:</span> ap<span class=\"token punctuation\">-</span>northeast<span class=\"token punctuation\">-</span><span class=\"token number\">2</span>\r\n    <span class=\"token key atrule\">stack</span><span class=\"token punctuation\">:</span>\r\n      <span class=\"token key atrule\">auto</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\r\n    <span class=\"token key atrule\">s3</span><span class=\"token punctuation\">:</span>\r\n      <span class=\"token key atrule\">bucket</span><span class=\"token punctuation\">:</span> file<span class=\"token punctuation\">-</span>upload<span class=\"token punctuation\">-</span>test<span class=\"token punctuation\">-</span>lee</code></pre></div>\n<p>application.yml 에 aws 관련 정보를 기재해 준다.</p>\n<p>AmazonS3Config</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Slf4j</span>\r\n<span class=\"token annotation punctuation\">@Configuration</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AmazonS3Config</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\">/**\r\n     * aws 가용 지역\r\n     */</span>\r\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${cloud.aws.region.static}\"</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> region<span class=\"token punctuation\">;</span>\r\n    <span class=\"token comment\">/**\r\n     * secretmanager key arn\r\n     */</span>\r\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${secret.name.key}\"</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> secretName<span class=\"token punctuation\">;</span>\r\n    <span class=\"token comment\">/**\r\n     * s3 접근을 위한 위한 사용자 bean\r\n     */</span>\r\n    <span class=\"token annotation punctuation\">@Bean</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">AmazonS3Client</span> <span class=\"token function\">amazonS3Client</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------------------------------------->AmazonS3Client\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">AwsSecret</span> secretKeys <span class=\"token operator\">=</span> <span class=\"token class-name\">SecretManagerBuild</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSecret</span><span class=\"token punctuation\">(</span>secretName<span class=\"token punctuation\">,</span>region<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">String</span> accessKey <span class=\"token operator\">=</span> secretKeys<span class=\"token punctuation\">.</span><span class=\"token function\">getAws_ac_key</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">String</span> secretKey <span class=\"token operator\">=</span> secretKeys<span class=\"token punctuation\">.</span><span class=\"token function\">getAws_se_key</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n        <span class=\"token class-name\">BasicAWSCredentials</span> awsCreds <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BasicAWSCredentials</span><span class=\"token punctuation\">(</span>accessKey<span class=\"token punctuation\">,</span> secretKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">AmazonS3Client</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">AmazonS3ClientBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">standard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n                <span class=\"token punctuation\">.</span><span class=\"token function\">withRegion</span><span class=\"token punctuation\">(</span>region<span class=\"token punctuation\">)</span>\r\n                <span class=\"token punctuation\">.</span><span class=\"token function\">withCredentials</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">AWSStaticCredentialsProvider</span><span class=\"token punctuation\">(</span>awsCreds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>AmazonS3ClientBuilder 를통해 접근 정보를 만들어 준다.</p>\n<p>S3Service</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Slf4j</span>\r\n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\r\n<span class=\"token annotation punctuation\">@Component</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">S3Service</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\">/**\r\n     * s3 접근 정보\r\n     */</span>\r\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">AmazonS3Client</span> amazonS3Client<span class=\"token punctuation\">;</span>\r\n    <span class=\"token comment\">/**\r\n     * S3 버킷 명\r\n     */</span>\r\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${cloud.aws.s3.bucket}\"</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> bucket<span class=\"token punctuation\">;</span>\r\n    <span class=\"token comment\">/**\r\n     * 객체 url을 읽어온다\r\n     * @param {string} bucket 버킷명\r\n     * @param {string} fileName 파일명\r\n     * @returns {string} imageUrl 이미지 url\r\n     */</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fileName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\">String</span> imageUrl <span class=\"token operator\">=</span> amazonS3Client<span class=\"token punctuation\">.</span><span class=\"token function\">getUrl</span><span class=\"token punctuation\">(</span>bucket<span class=\"token punctuation\">,</span> fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">return</span> imageUrl<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token comment\">/**\r\n     * S3 파일 업로드를 위한 경로 재정의\r\n     * @param {File} uploadFile 업로드할 파일\r\n     * @param {string} dirName 경로명\r\n     * @returns {string} uploadImageUrl\r\n     */</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">uploadMultipart</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MultipartFile</span> multipartFile<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> dirName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\">File</span> uploadFile <span class=\"token operator\">=</span> <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span>multipartFile<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 파일 변환할 수 없으면 에러</span>\r\n                <span class=\"token punctuation\">.</span><span class=\"token function\">orElseThrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error: MultipartFile -> File convert fail\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n        <span class=\"token keyword\">return</span> <span class=\"token function\">upload</span><span class=\"token punctuation\">(</span>uploadFile<span class=\"token punctuation\">,</span> dirName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token comment\">/**\r\n     * S3 파일 업로드를 위한 경로 재정의\r\n     * @param {File} uploadFile 업로드할 파일\r\n     * @param {string} dirName 경로명\r\n     * @returns {string} uploadImageUrl\r\n     */</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">upload</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">File</span> uploadFile<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> dirName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\">String</span> fileName <span class=\"token operator\">=</span> dirName <span class=\"token operator\">+</span> <span class=\"token string\">\"/\"</span> <span class=\"token operator\">+</span> uploadFile<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">String</span> uploadImageUrl <span class=\"token operator\">=</span> <span class=\"token function\">putS3</span><span class=\"token punctuation\">(</span>uploadFile<span class=\"token punctuation\">,</span> fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token function\">removeNewFile</span><span class=\"token punctuation\">(</span>uploadFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">return</span> uploadImageUrl<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token comment\">/**\r\n     * S3 업로드\r\n     * @param {File} uploadFile 업로드할 파일\r\n     * @param {string} fileName 파일명\r\n     * @returns {string} awsS3UrlName 업로드된 url\r\n     */</span>\r\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">putS3</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">File</span> uploadFile<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> fileName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        amazonS3Client<span class=\"token punctuation\">.</span><span class=\"token function\">putObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PutObjectRequest</span><span class=\"token punctuation\">(</span>bucket<span class=\"token punctuation\">,</span> fileName<span class=\"token punctuation\">,</span> uploadFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withCannedAcl</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CannedAccessControlList<span class=\"token punctuation\">.</span>PublicRead</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">String</span> awsS3UrlName <span class=\"token operator\">=</span> amazonS3Client<span class=\"token punctuation\">.</span><span class=\"token function\">getUrl</span><span class=\"token punctuation\">(</span>bucket<span class=\"token punctuation\">,</span> fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">return</span> awsS3UrlName<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token comment\">/**\r\n     * S3 다운로드\r\n     * @param {string} fileName 파일명\r\n     * @returns {S3Object} obj 객체\r\n     */</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token function\">download</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> storedFileName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\">S3Object</span> o <span class=\"token operator\">=</span> amazonS3Client<span class=\"token punctuation\">.</span><span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">GetObjectRequest</span><span class=\"token punctuation\">(</span>bucket<span class=\"token punctuation\">,</span> storedFileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">S3ObjectInputStream</span> objectInputStream <span class=\"token operator\">=</span> o<span class=\"token punctuation\">.</span><span class=\"token function\">getObjectContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> <span class=\"token class-name\">IOUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">toByteArray</span><span class=\"token punctuation\">(</span>objectInputStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">String</span> fileName <span class=\"token operator\">=</span> <span class=\"token class-name\">URLEncoder</span><span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>storedFileName<span class=\"token punctuation\">,</span> <span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\\+\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"%20\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">HttpHeaders</span> httpHeaders <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HttpHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        httpHeaders<span class=\"token punctuation\">.</span><span class=\"token function\">setContentType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span>APPLICATION_OCTET_STREAM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        httpHeaders<span class=\"token punctuation\">.</span><span class=\"token function\">setContentLength</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        httpHeaders<span class=\"token punctuation\">.</span><span class=\"token function\">setContentDispositionFormData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"attachment\"</span><span class=\"token punctuation\">,</span> fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> httpHeaders<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token comment\">// 로컬에 저장된 이미지 지우기</span>\r\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">removeNewFile</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">File</span> targetFile<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>targetFile<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"File delete success\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"File delete fail\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token comment\">// 로컬에 파일 업로드 하기</span>\r\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">File</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MultipartFile</span> file<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\">File</span> convertFile <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user.dir\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"/\"</span> <span class=\"token operator\">+</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">getOriginalFilename</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>convertFile<span class=\"token punctuation\">.</span><span class=\"token function\">createNewFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 바로 위에서 지정한 경로에 File이 생성됨 (경로가 잘못되었다면 생성 불가능)</span>\r\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">FileOutputStream</span> fos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span>convertFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// FileOutputStream 데이터를 파일에 바이트 스트림으로 저장하기 위함</span>\r\n                fos<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span>\r\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>convertFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n\r\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>S3에 접근 후 내가 필요한 작업들을 정의해준다.</p>\n<p>CheckController</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RestController</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CheckController</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token annotation punctuation\">@Autowired</span>\r\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">S3Service</span> s3Service<span class=\"token punctuation\">;</span>\r\n    <span class=\"token comment\">//multipartfile 업로드시</span>\r\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/fileUpload\"</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"file\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">MultipartFile</span> file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\r\n            s3Service<span class=\"token punctuation\">.</span><span class=\"token function\">uploadMultipart</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span><span class=\"token string\">\"uploadTest\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token comment\">//서버에 저장되어 있는 파일 업로드시</span>\r\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/localUpload\"</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">fileUpload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token class-name\">String</span> fileName <span class=\"token operator\">=</span> <span class=\"token string\">\"mey.jpg\"</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token class-name\">ResourceUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"classpath:static/image/test/\"</span><span class=\"token operator\">+</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            s3Service<span class=\"token punctuation\">.</span><span class=\"token function\">upload</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span><span class=\"token string\">\"uploadTest\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">FileNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token comment\">//S3에 저장된 파일 다운로드</span>\r\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/localDown\"</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token function\">fileDownload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span>  <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> s3Service<span class=\"token punctuation\">.</span><span class=\"token function\">download</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"uploadTest/mey.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>나는 두 가지 방식을 테스트하려 한다</p>\n<p>첫 번째 resources 영역에 내가 미리 넣어둔 이미지 파일을 업로드하는 방식</p>\n<p>두 번째 포스트 맨으로 multipartfile을 보내 업로드하는 방식</p>\n<p>사실 둘 다 로컬에 한번 저장하는 과정이 필요하다 s3 service를 보면 더 자세히 알 수 있다.</p>\n<ol start=\"4\">\n<li>포스트 맨을 통한 테스트</li>\n</ol>\n<p>먼저 첫 번째 방식을 테스트해보자 아래와 같이 요청을 했을 때</p>\n<p><img src=\"/d2cd2b36d8fc8ede145cc9291e5b2593/springboots32.png\" alt=\"springboots32.PNG\"></p>\n<p>내가 생성한 버킷에 설정한 폴더명이 생기고 클릭해보면 로컬에 넣어놨던 파일이 저장되어 있다.</p>\n<p><img src=\"/e8d5cc1ad037cc188e1024714b22b5ca/springboots33.png\" alt=\"springboots33.PNG\"></p>\n<p><img src=\"/aad62088b69c8694ec69ba188ec2ed6f/springboots34.png\" alt=\"springboots34.PNG\"></p>\n<p>두 번째 방식도 테스트를 해보자</p>\n<p>아래와 같이 파일을 넣어서 요청해 보면</p>\n<p><img src=\"/b63ed1f3be39f32466aa13d41e46e8de/springboots35.png\" alt=\"springboots35.PNG\"></p>\n<p>같은 버킷의 폴더에 아래와 같이 내가 보낸 파일이 업로드된 걸 볼 수 있다.</p>\n<p><img src=\"/f2c0d82b46ace6be0f081748ded7a793/springboots36.png\" alt=\"springboots36.PNG\"></p>\n<ol start=\"5\">\n<li>S3 객체 다운로드 테스트</li>\n</ol>\n<p>브라우저 창을 하나 열고 다운로드 테스트를 해보자</p>\n<p>아래처럼 내가 방금 업로드한 파일이 잘 다운로드되는 걸 확인할 수 있다.</p>\n<p><img src=\"/30878cf845f3091536f74d31978985f5/springboots37.png\" alt=\"springboots37.PNG\"></p>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌭마무리</h2>\n<p>이처럼 간단하게 springboot를 사용하여 s3에 접근 후 파일 업로드 다운로드를 구현해 보았다.</p>\n<p>굉장히 간단한 예제이므로 공식문서 등을 참고하여 좀 더 여러 방식으로 사용이 가능하다 생각된다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#-%EA%B0%9C%EC%9A%94\">👀 개요</a></li>\n<li><a href=\"#-s3-%ED%8C%8C%EC%9D%BC-%EC%97%85%EB%A1%9C%EB%93%9C\">🗑 S3 파일 업로드</a></li>\n<li><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\">🌭마무리</a></li>\n</ul>\n</div>","excerpt":"👀 개요 이전 포스팅에서 S3에 대해서 간단하게 다뤘었다. 요번에는 S3에 파일을 올리는 과정을 포스팅하려 한다. ❗ S3에 대해서는 이전 포스팅 참고 S3란? 🦺 S3 버킷 생성에 대해서는 이전 포스팅 참고 S3 버킷 생성 🗑 S3 파일 업로드 버킷 생성 일단 나는 아래 그림처럼 file-upload-test-lee라는 명칭으로 퍼블릭한 버킷을 하나 생성했다.\r\nspringboots3.PNG 해당 버킷을 클릭하여 들어가면 아무런 객체도 없는 상태이다.\r\nspringboots31.PNG 그리고 iam 권한에 사용자에게 S3 FullAccess 권한을 부여해야 합니다. (이것이 있어야 S3에 파일 업로드를 할 수 있습니다.) 일단 aws 상에서의 작업은 이 정도만 해주면 된다. 이제 실제 애플리케이션에서 aws s3 서비스를 구현해 보자. AmazonS3ClientBuilder 를 사용한 업로드 구현 의존성 추가 프로젝트 구조 AmazonS3Config CheckController …","frontmatter":{"date":"March 07, 2022","title":"AWS S3 파일 업로드,다운로드","categories":"SpringBoot","author":"쩡기","emoji":"👖"},"fields":{"slug":"/springbootStudyS3Service/"}},"next":{"id":"18b3d373-37f6-5f15-9b81-9d0d3dd08abc","html":"<h2 id=\"-기초외부-api-호출\" style=\"position:relative;\"><a href=\"#-%EA%B8%B0%EC%B4%88%EC%99%B8%EB%B6%80-api-%ED%98%B8%EC%B6%9C\" aria-label=\" 기초외부 api 호출 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎋 기초(외부 API 호출)</h2>\n<p>정말 간단한 컨트롤러에서 사용하는 기본 예제이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">controller</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">OutputStreamWriter</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpURLConnection</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span>URL<span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">.</span>simple<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">.</span>simple<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JSONValue</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Controller</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestMapping</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResponseBody</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token annotation punctuation\">@Controller</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test_api</span> <span class=\"token punctuation\">{</span>\r\n\r\n\t<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/test-api\"</span><span class=\"token punctuation\">,</span> produces<span class=\"token operator\">=</span><span class=\"token string\">\"application/json;charset=UTF-8\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">)</span>\r\n\t<span class=\"token annotation punctuation\">@ResponseBody</span>\r\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testServiceApi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\r\n\r\n\r\n\t\t<span class=\"token class-name\">String</span> body_contents1 <span class=\"token operator\">=</span> <span class=\"token string\">\"body_text\"</span><span class=\"token punctuation\">;</span>\r\n\t\t<span class=\"token class-name\">String</span> result_txt <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\r\n\r\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\r\n\t\t\t<span class=\"token class-name\">JSONObject</span> reqParams <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t\t\treqParams<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"body_contents1\"</span><span class=\"token punctuation\">,</span> body_contents1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// body에 들어갈 내용을 담는다.</span>\r\n\r\n\t\t\t<span class=\"token class-name\">URL</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://www.test.com/test/open/order/possible-check\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 호출할 외부 API 를 입력한다.</span>\r\n\r\n\t\t\t<span class=\"token class-name\">HttpURLConnection</span> conn <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpURLConnection</span><span class=\"token punctuation\">)</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">openConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// header에 데이터 통신 방법을 지정한다.</span>\r\n\t\t\tconn<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t\t\tconn<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"application/json; utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n\t\t\t<span class=\"token comment\">// Post인 경우 데이터를 OutputStream으로 넘겨 주겠다는 설정</span>\r\n\t\t\tconn<span class=\"token punctuation\">.</span><span class=\"token function\">setDoOutput</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n\t\t\t<span class=\"token comment\">// Request body message에 전송</span>\r\n\t\t\t<span class=\"token class-name\">OutputStreamWriter</span> os <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OutputStreamWriter</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span><span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t\t\tos<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>reqParams<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t\t\tos<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n\t\t\t<span class=\"token comment\">// 응답</span>\r\n\t\t\t<span class=\"token class-name\">BufferedReader</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t\t\t<span class=\"token class-name\">JSONObject</span> jsonObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">JSONValue</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n\t\t\tin<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t\t\tconn<span class=\"token punctuation\">.</span><span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n\t\t\tresult_txt <span class=\"token operator\">=</span> <span class=\"token string\">\"response :: \"</span> <span class=\"token operator\">+</span> jsonObj<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result_txt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t\t<span class=\"token punctuation\">}</span>\r\n\t\t<span class=\"token keyword\">return</span> result_txt<span class=\"token punctuation\">;</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"-마무리\" style=\"position:relative;\"><a href=\"#-%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\" 마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎍 마무리</h2>\n<p>컨트롤러에서 지정한 외부 api를 호출하는 예제이다.</p>\n<p>하지만 실제로는 외부 api를 호출한 다음 다른 작업들을 많이 해주는 편이다 그러므로 서비스단에서 작성해주는 경우가 많은 거 같다.\r\n<br>\r\n<br></p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#-%EA%B8%B0%EC%B4%88%EC%99%B8%EB%B6%80-api-%ED%98%B8%EC%B6%9C\">🎋 기초(외부 API 호출)</a></li>\n<li><a href=\"#-%EB%A7%88%EB%AC%B4%EB%A6%AC\">🎍 마무리</a></li>\n</ul>\n</div>","frontmatter":{"date":"March 04, 2022","title":"Java 외부 api 호출 방법","categories":"JAVA","author":"쩡기","emoji":"🎄"},"fields":{"slug":"/gatsby-java-study/"}},"prev":{"id":"2367e5c2-9816-507e-98e1-c58f271d9478","html":"<h2 id=\"-개요\" style=\"position:relative;\"><a href=\"#-%EA%B0%9C%EC%9A%94\" aria-label=\" 개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✨ 개요</h2>\n<p>내가 진행 했던 프로젝트 에서 네이버 클라우드 플렛폼에서 지원하는 OCR API를 사용하여 이미지의 텍스트를 추출하는 작업을 담당 했었고</p>\n<p>해당 작업을 정리하기 위해 포스팅을 하려 한다.</p>\n<h2 id=\"-ocr\" style=\"position:relative;\"><a href=\"#-ocr\" aria-label=\" ocr permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👓 OCR?</h2>\n<p>OCR(Optical character recognition, 광학 문자 인식)은 이미지(사진) 속 글자 위치를 찾고 어떤 글자인지 자동으로 알아내는 기술입니다.</p>\n<p>OCR은 다양한 형태의 글자를 이해하기 위해 독자적인 글자 영역 검출 및 인식 기술을 보유하고 있습니다.</p>\n<p>또한 손쉽게 템플릿을 만들고 원하는 영역을 지정한 뒤, 필요한 글자만 빠르게 추출하는 기능을 제공합니다.</p>\n<h3 id=\"-naver-clova-ocr-\" style=\"position:relative;\"><a href=\"#-naver-clova-ocr-\" aria-label=\" naver clova ocr  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📷 Naver CLOVA OCR ?</h3>\n<p>CLOVA OCR 서비스는 네이버의 AI 기술을 활용하여 주요 비즈니스 활용에 최적화된 고성능 OCR 인식 모델을 적용하였습니다.</p>\n<p>문자 인식이 제공되는 언어는 한국어, 영어, 일본어이며, 필기체 인식은 한국어와 일본어가 지원됩니다.</p>\n<p>CLOVA OCR은 문서 레이아웃 분석 및 글자를 읽는 순서 방향을 추정하여 둥글게 곡선으로 배열되거나 기울어진 문자, 필기체 인식 등 고성능 AI 모델바탕으로 높은 수준의 정확도를 제공합니다.</p>\n<p>OCR분야 가장 권위있는 글로벌 챌린지ICDAR2019 4개 분야에서 1위, CVPR 및 ICCV 국제학회 논문 선정 등 독보적기술력이 집약된 CLOVA OCR을 네이버 클라우드 플랫폼을 통해 손쉽게 이용할 수 있습니다</p>\n<blockquote>\n<p>🎫 네이버 에서 제공하는 기능에 대한 부분은 공식 문서를 참고하자. <a href=\"https://www.ncloud.com/product/aiService/ocr\">출처</a></p>\n</blockquote>\n<h4 id=\"-clova-ocr-사용-가이드\" style=\"position:relative;\"><a href=\"#-clova-ocr-%EC%82%AC%EC%9A%A9-%EA%B0%80%EC%9D%B4%EB%93%9C\" aria-label=\" clova ocr 사용 가이드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎏 CLOVA OCR 사용 가이드</h4>\n<ol>\n<li>CLOVA OCR 사용하기</li>\n</ol>\n<p><a href=\"https://console.ncloud.com/dashboard\">콘솔</a>에 접속 후 아래의 단계를 거쳐 쉽게 서비스를 이용할 수 있습니다.</p>\n<ul>\n<li>Step 1. 서비스 이용 신청 및 약관 동의</li>\n<li>Step 2. 도메인 생성</li>\n<li>Step 3. 템플릿 생성</li>\n<li>Step 4. 테스트 및 분석</li>\n<li>Step 5. 컴포넌트</li>\n<li>Step 6. 설정</li>\n<li>Step 7. 배포 관리</li>\n</ul>\n<p>Step 1. 서비스 이용 신청 및 약관 동의</p>\n<p>CLOVA OCR 서비스를 이용하기 위해서는 이용 신청 및 약관 동의가 필요합니다.</p>\n<blockquote>\n<p><a href=\"https://www.ncloud.com/product/aiService/ocr\">바로가기</a> 해당 페이지 접속후 이용 신청하기 클릭</p>\n</blockquote>\n<p><img src=\"/425f95c78a7066cb228f8623e25065fc/OCR.png\" alt=\"OCR.PNG\"></p>\n<p>[상품 이용신청] 버튼을 클릭하여 약관에 동의한 후 다음 단계로 이동합니다.</p>\n<p><img src=\"/97e9521723dbeb9a4a7e18c87c606824/OCR1.png\" alt=\"OCR1.PNG\"></p>\n<p>Step 2. 도메인 생성</p>\n<p>본격적으로 CLOVA OCR 서비스를 제작하기 위해 도메인을 생성합니다.</p>\n<p>콘솔에서 Domain 클릭후 도메인 생성 클릭</p>\n<p><img src=\"/4a3512fa3ba9973599cff877b35c453a/OCR2.png\" alt=\"OCR2.PNG\"></p>\n<p><img src=\"/c38428b052152d685008c1b31417fe0d/OCR3.png\" alt=\"OCR3.PNG\"></p>\n<p>도메인 생성이 완료되면 도메인 목록을 확인할 수 있습니다. 텍스트 추출만 가능한 General 도메인은 ‘Text OCR’(API Gateway 연동), ‘Demo’(Table 자동 추출 제공) 버튼이 동작 메뉴에 나타나고 Template 도메인의 경우 ‘템플릿 빌더’ 실행 버튼이 노출됩니다.</p>\n<p>선택한 도메인의 동작 메뉴에서 템플릿 빌더 버튼을 클릭하면 도메인 정보를 확인할 수 있고 새로운 창에서 OCR 빌더가 실행됩니다.</p>\n<p><img src=\"/32dec9c7a9149bcd1f6e3c6f59ed111c/OCR4.png\" alt=\"OCR4.PNG\"></p>\n<p>동작 메뉴에서 Text OCR 버튼을 클릭하면, 템플릿 설정 없이 전체 텍스트만 추출 가능한 General OCR 연동 설정 pop-up 창이 노출되고 Custom API Gateway 설정을 통해 자동 연동이 가능합니다.</p>\n<p><img src=\"/b0b7f263f3462c0c1e17f834d9b29afe/OCR5.png\" alt=\"OCR5.PNG\"></p>\n<p>Custom API Gateway 연동</p>\n<ul>\n<li>Text OCR 버튼 클릭 시 외부 주소와 연동 설정이 가능한 창이 노출됩니다.</li>\n<li>OCR Invoke URL은 외부 연동 Endpoint에 입력할 OCR API 주소를 의미합니다.</li>\n<li>API Gateway 이용 신청이 되어 있는 경우, 자동 연동 (Interlock) 버튼을 클릭해 손쉽게 자동 연동할 수 있습니다.</li>\n</ul>\n<p>자세한 내용은 공식 가이드 문서 <a href=\"https://guide.ncloud-docs.com/docs/ocr-ocr-1-1\">참고</a></p>\n<p>위의 내용은 간략한 가이드 이다 꼭 공식 가이드 문서를 참고하자</p>\n<p>나는 도메인을 생성해준 다음 자동 APIGW 연동을 해주었다.</p>\n<p>그렇게 해주면 아래와 같이 생성된 Secret Key를 통해 APIGW Invoke URL을 호출하면 사용할 수 있습니다.</p>\n<p><img src=\"/ff86609b7dda85e496690bb9341f9437/OCR6.png\" alt=\"OCR6.PNG\"></p>\n<h4 id=\"-clova-ocr-api--호출-가이드\" style=\"position:relative;\"><a href=\"#-clova-ocr-api--%ED%98%B8%EC%B6%9C-%EA%B0%80%EC%9D%B4%EB%93%9C\" aria-label=\" clova ocr api  호출 가이드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎨 CLOVA OCR API  호출 가이드</h4>\n<p>CLOVA OCR API 호출 방법</p>\n<p>Step 1. API 환경 설정하기</p>\n<p>OCR 빌더에서 만든 도메인은 고유한 InvokeURL이 있습니다.</p>\n<p>이 InvokeURL은 안전한 서비스를 위해 외부 서비스에 바로 공개되지 않습니다. 그리고 보안 및 서비스 처리 수준을 높이기 위해서 API Gateway 상품에 연동하여 사용하도록 설계되어 있습니다.</p>\n<p>Step 2. 자동으로 API Gateway 연동하기</p>\n<p>API Gateway와 연동하는 방법에는 자동과 수동이 있으며, 자동연동 기능을 선택하시면 몇 번의 클릭으로 쉽게 API Gateway 연동을 완료하실 수 있습니다.</p>\n<p>이 단계에서는 Secret Key 와 OCR Invoke URL을 생성합니다.</p>\n<ul>\n<li>Text OCR 사용하기</li>\n</ul>\n<p><img src=\"/b66c5600045ee0ccdefd86c75186907c/OCR7.png\" alt=\"OCR7.PNG\"></p>\n<ul>\n<li>Secret Key를 생성합니다.</li>\n<li>APIGW 자동연동 버튼을 클릭합니다.</li>\n</ul>\n<p><img src=\"/f6a57a3bdadf986b6dff0032d63b9dfa/OCR8.png\" alt=\"OCR8.PNG\">\r\nAPI Gateway 서비스의 이용 신청이 되어 있지 않다면, 먼저 신청을 완료해야 합니다.\r\n<img src=\"/28d8dea80b7c890a220e855b379cff6f/OCR9.png\" alt=\"OCR9.PNG\"></p>\n<p>APIGW 연동이 완료되었습니다.</p>\n<p>중요한 정보인 Secret Key 와 OCR Invoke URL 값을 복사해 놓습니다.</p>\n<ul>\n<li>Secret Key : {X-OCR-SECRET}</li>\n<li>OCR Invoke URL : {OCR Invoke URL}</li>\n</ul>\n<p>Step 3. API Gateway 생성 URL 확인하기</p>\n<p>콘솔에서 API Gateway 상품으로 이동합니다.</p>\n<p>My Products에 OCR_CUSTOM_API_KR 이라는 Product가 생성되어 있습니다.</p>\n<p><img src=\"/fb5d24b3083a0f400929ff90590f5e79/OCR10.png\" alt=\"OCR10.PNG\"></p>\n<p><img src=\"/01ef924fcbc39bcf0582a8539b772ba3/OCR11.png\" alt=\"OCR11.PNG\"></p>\n<p>여기까지 정상적으로 표시되었다면, API 호출 준비가 완료되었습니다.</p>\n<p>Step 4. Postman으로 API 호출해 보기 (TEXT OCR)</p>\n<p>Text OCR API를 실행할 경우 업로드 된 이미지의 텍스트 추출이 가능합니다.</p>\n<p>Postman에서 새로운 API를 생성하고 호출방식을 POST로 설정합니다.</p>\n<p>Invoke URL 주소에 OCR에서 생성한 API Gateway의 InvokeURL을 입력합니다.</p>\n<p><img src=\"/94d034afa8799ea1dffbd00644e16fd3/OCR12.png\" alt=\"OCR12.PNG\"></p>\n<p>Header 항목에 아래와 같이 X-OCR-SECRET 정보를 입력합니다.</p>\n<p>Content-Type : application/json</p>\n<p>X-OCR-SECRET : {X-OCR-SECRET }</p>\n<p><img src=\"/4fd99246bf11abcfbd5b63991d14735d/OCR13.png\" alt=\"OCR13.PNG\"></p>\n<p>TEXT OCR 호출 BODY는 이미지 인식 요청 BODY 의 형식으로 넣습니다.</p>\n<p>자세한 이미지 인식 요청 형식은 API 참조서를 확인해주세요</p>\n<p>Request Body:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\r\n    <span class=\"token property\">\"images\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\r\n      <span class=\"token punctuation\">{</span>\r\n        <span class=\"token property\">\"format\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"png\"</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"medium\"</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://kr.object.ncloudstorage.com/ocr-img/OCR_ko(1)REAN_ko(1).png\"</span>\r\n      <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token property\">\"lang\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ko\"</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token property\">\"requestId\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token property\">\"resultType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token property\">\"timestamp\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>$timestamp<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"V1\"</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"/2dfb4913cdcacea89a98c01f501ecb23/OCR14.png\" alt=\"OCR14.PNG\"></p>\n<p>SEND 버튼을 눌러서 응답을 확인합니다.</p>\n<p><img src=\"/081c6fd99b41ce1f97ae5df324146519/OCR15.png\" alt=\"OCR15.PNG\"></p>\n<p>OCR 요청 방식은 <a href=\"https://api.ncloud-docs.com/docs/ai-application-service-ocr-ocr\">여기</a>에서 확인</p>\n<h2 id=\"-마무리\" style=\"position:relative;\"><a href=\"#-%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\" 마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎍 마무리</h2>\n<p>기본적인 OCR 사용 방법을 기재해 보았다.</p>\n<p>사실 가이드 문서에 이미 잘정리되어 있는 내용이라서 딱히 내가 추가적으로 기재할필요가 없다고 생각하나</p>\n<p>이다음 포스팅에서는 스프링 부트에서 해당 OCR API 연동 및 사용 방법을 기록 하기 위해 간략히 OCR 가이드 방법을 기록 하였다.</p>\n<br>\r\n<br>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EA%B0%9C%EC%9A%94\">✨ 개요</a></p>\n</li>\n<li>\n<p><a href=\"#-ocr\">👓 OCR?</a></p>\n<ul>\n<li>\n<p><a href=\"#-naver-clova-ocr-\">📷 Naver CLOVA OCR ?</a></p>\n<ul>\n<li><a href=\"#-clova-ocr-%EC%82%AC%EC%9A%A9-%EA%B0%80%EC%9D%B4%EB%93%9C\">🎏 CLOVA OCR 사용 가이드</a></li>\n<li><a href=\"#-clova-ocr-api--%ED%98%B8%EC%B6%9C-%EA%B0%80%EC%9D%B4%EB%93%9C\">🎨 CLOVA OCR API  호출 가이드</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EB%A7%88%EB%AC%B4%EB%A6%AC\">🎍 마무리</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"March 08, 2022","title":"NAVER cloud OCR API 사용 방법","categories":"NAVERCLOUD","author":"쩡기","emoji":"🔍"},"fields":{"slug":"/naverOCRStudy/"}},"site":{"siteMetadata":{"siteUrl":"https://leesungki.github.io","comments":{"utterances":{"repo":"LeeSungKi/leesungki.github.io"}}}}},"pageContext":{"slug":"/springbootStudyS3Service/","nextSlug":"/gatsby-java-study/","prevSlug":"/naverOCRStudy/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}