{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/gatsby-aws-study-efs/",
    "result": {"data":{"cur":{"id":"9e85e7d7-81fa-5781-88e6-547753a51b1d","html":"<h2 id=\"-aws-elastic-file-system-란\" style=\"position:relative;\"><a href=\"#-aws-elastic-file-system-%EB%9E%80\" aria-label=\" aws elastic file system 란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎈 AWS Elastic File System 란?</h2>\n<p>AWS EFS는 파일 방식으로 데이터를 저장하는 AWS의 대표 fully-managed file storage 서비스이다.</p>\n<p>파일 스토리지는 일반적으로 OS에서 이용되는 파일 시스템에 사용되는 비교적 친숙한 방식의 스토리지이다.</p>\n<p>AWS EFS가 갖는 주요 특징들을 알아보자.</p>\n<h3 id=\"efs-의-특징\" style=\"position:relative;\"><a href=\"#efs-%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-label=\"efs 의 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>EFS 의 특징</h3>\n<h3>계층적 구조</h3>\n<p>파일 스토리지는 block 혹은 object 방식의 스토리지와 달리, 폴더와 파일로 구성된 계층적 구조를 갖는다.</p>\n<h3>공유 가능</h3>\n<p>AWS EFS는 SAN 방식으로 구현된 AWS EBS와 다르게, NFS(Network File System)를 기반으로 여러 EC2 인스턴스가 동일한 파일 시스템을 공유할 수 있다. AWS EFS는 기본적으로 수 천 여개의 concurrent NFS connection을 지원한다.</p>\n<h3>유연한 확장</h3>\n<p>Elastic 이라는 이름처럼, AWS EFS는 파일이 추가/삭제됨에 따라 스토리지의 용량이 탄력적으로 증가/감소하게 된다. 이러한 특징은 적절한 용량과 IOPS 등을 예측하기 힘든 공유 파일 스토리지를 운영의 번거로움을 크게 줄여줄 뿐만 아니라 비용을 최소화할 수 있다는 장점이 있다.</p>\n<h3>다양한 성능 옵션</h3>\n<p>Throughtput, IOPS 등과 같이 디스크 성능과 관련된 다양한 옵션을 제공한다. 사용자는 어플리케이션의 요구에 맞춘 최적의 file storage를 구성할 수 있다. 주요 옵션으로 General Purpose와 Max I/O 모드를 지원한다. General Purpose모드와 Max I/O 모드는 각각 low-latency와 high throughput &#x26; high IOPS에 최적화 되어있다. 따라서, latency-sensitive한 어플리케이션의 경우 General Purpose, Large-scale and data-heavy 어플리케이션은 Max I/O가 좋은 선택지가 될 수 있다.</p>\n<h3>고가용성</h3>\n<p>AWS EFS는 서로 다른 AZ에 데이터를 복제하는 방식으로 높은 데이터의 안정성과 가용성을 보장한다.</p>\n<h3>보안 정책</h3>\n<p>AWS EFS는 VPC security group과 network ACL을 기반으로 네트워크 정책을 구성할 수 있다. 추가적으로, IAM을 통한 권한 제어가 가능하다. AWS EFS를 마운트한 이후에는 일반적인 파일 시스템과 동일하게 POSIX permission 설정을 지원한다.</p>\n<h3 id=\"architecture\" style=\"position:relative;\"><a href=\"#architecture\" aria-label=\"architecture permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Architecture</h3>\n<p><img src=\"/ed31bad818405d9307c191410704e604/efs1.png\" alt=\"efs1.PNG\"></p>\n<h3>NFS client</h3>\n<p>NFS server에 해당하는 AWS EFS를 마운트하여 사용하는 EC2 인스턴스에 해당한다. NFS client는 mount point를 통해 AWS EFS에 접근할 수 있다. 그림 상에서는 모든 AZ에서 AWS EFS를 사용할 수 있는 것으로 표현되었으나, 실제로는 storage class에 따라서 AWS EFS에 접근할 수 있는 AZ의 수가 제한될 수 있다.</p>\n<h3>Mount target</h3>\n<p>NFS client가 AWS EFS를 마운트하기 위해 필요한 NFSv4 endpoint로 IP 주소와 DNS를 제공한다. Standard storage class를 사용하는 경우, 각 AZ마다 1개의 mount taget을 생성할 수 있다. One Zone storage class를 사용하는 경우, AWS EFS가 위치한 AZ에만 제한적으로 1개의 mount point를 생성할 수 있다.</p>\n<h3>DNS name/ File System ID</h3>\n<p>NFS client가 편리하게 AWS EFS에 접근하기 위해 제공되는 DNS 서비스이다.</p>\n<h2 id=\"-마무리\" style=\"position:relative;\"><a href=\"#-%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\" 마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🧨 마무리</h2>\n<p>이렇게 위와 같은 특징을 가지고 있는 efs를 사용하는 간단한 실습도 진행해 보자.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-aws-elastic-file-system-%EB%9E%80\">🎈 AWS Elastic File System 란?</a></p>\n<ul>\n<li><a href=\"#efs-%EC%9D%98-%ED%8A%B9%EC%A7%95\">EFS 의 특징</a></li>\n<li><a href=\"#architecture\">Architecture</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EB%A7%88%EB%AC%B4%EB%A6%AC\">🧨 마무리</a></p>\n</li>\n</ul>\n</div>","excerpt":"🎈 AWS Elastic File System 란? AWS EFS는 파일 방식으로 데이터를 저장하는 AWS의 대표 fully-managed file storage 서비스이다. 파일 스토리지는 일반적으로 OS에서 이용되는 파일 시스템에 사용되는 비교적 친숙한 방식의 스토리지이다. AWS EFS가 갖는 주요 특징들을 알아보자. EFS 의 특징 파일 스토리지는 block 혹은 object 방식의 스토리지와 달리, 폴더와 파일로 구성된 계층적 구조를 갖는다. AWS EFS는 SAN 방식으로 구현된 AWS EBS와 다르게, NFS(Network File System)를 기반으로 여러 EC2 인스턴스가 동일한 파일 시스템을 공유할 수 있다. AWS EFS는 기본적으로 수 천 여개의 concurrent NFS connection을 지원한다. Elastic 이라는 이름처럼, AWS EFS는 파일이 추가/삭제됨에 따라 스토리지의 용량이 탄력적으로 증가/감소하게 된다. 이러한 특징은 적절한 용량과 …","frontmatter":{"date":"March 25, 2022","title":"AWS Elastic File System(EFS) 란?","categories":"AWS","author":"쩡기","emoji":"🎟"},"fields":{"slug":"/gatsby-aws-study-efs/"}},"next":{"id":"fd2d6c95-6f15-53ab-8867-8967af3d1de5","html":"<h2 id=\"-개요\" style=\"position:relative;\"><a href=\"#-%EA%B0%9C%EC%9A%94\" aria-label=\" 개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👀 개요</h2>\n<p>이전 포스팅에서 SQS에 대해서 간단하게 다뤘었다.</p>\n<p>요번에는 SQS를 SPRING BOOT 에서 사용하는 방법을 실습해 보겠다.</p>\n<blockquote>\n<p>❗ SQS에 대해서는 이전 포스팅 참고 <a href=\"https://leesungki.github.io/gatsby-aws-study-sqs/\">SQS란?</a></p>\n</blockquote>\n<blockquote>\n<p>🦺 SQS 대기열 생성 큐 수신,송신에 대해서는 이전 포스팅 참고 <a href=\"https://leesungki.github.io/gatsby-aws-study-sqs-tuto/\">SQS 사용법</a></p>\n</blockquote>\n<h2 id=\"-실습\" style=\"position:relative;\"><a href=\"#-%EC%8B%A4%EC%8A%B5\" aria-label=\" 실습 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖 실습</h2>\n<h3 id=\"-대기열-생성\" style=\"position:relative;\"><a href=\"#-%EB%8C%80%EA%B8%B0%EC%97%B4-%EC%83%9D%EC%84%B1\" aria-label=\" 대기열 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💼 대기열 생성</h3>\n<p>일단 나는 아래 그림처럼 SQS 대기열을 생성했다.\n<img src=\"/31ec1359a1941042f3cee317a8b64414/sqs.png\" alt=\"sqs.PNG\"></p>\n<p>해당 대기열 클릭하여 들어가면 세부정보의 url을 확인 할수있다.\n나중에 사용하기 위해 기억해두자\n<img src=\"/aa35b766164b5f930eabd3564633cb32/sqs1.png\" alt=\"sqs1.PNG\"></p>\n<h3 id=\"-필수-설정하기\" style=\"position:relative;\"><a href=\"#-%ED%95%84%EC%88%98-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\" 필수 설정하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🖋 필수 설정하기</h3>\n<p>의존성 추가</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-aws', version: '2.2.1.RELEASE'\nimplementation group: 'org.springframework.cloud', name: 'spring-cloud-aws-messaging', version: '2.2.3.RELEASE'\nimplementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: '2.5.6'//나중에 메세지 유효성 검사를 위함</code></pre></div>\n<p>프로젝트 구조</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">controller\n    L MainController\nconfig\n    L AmazonSqsConfig\naws\n    L AmazonSQSSender\n    L AmazonSQSSenderImpl\ndto\n    L EcmDto    </code></pre></div>\n<p>application.yml</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">aws</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">credentials</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">access-key</span><span class=\"token punctuation\">:</span> xxxxxx\n      <span class=\"token key atrule\">secret-key</span><span class=\"token punctuation\">:</span> xxxxxx\n    <span class=\"token key atrule\">region</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">static</span><span class=\"token punctuation\">:</span> ap<span class=\"token punctuation\">-</span>northeast<span class=\"token punctuation\">-</span><span class=\"token number\">2</span> <span class=\"token comment\"># AWS SQS의 리전정보</span>\n    <span class=\"token key atrule\">stack</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">auto</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n    <span class=\"token key atrule\">sqs</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">queue</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> MyQueue.fifo\t<span class=\"token comment\"># AWS에서 생성한 Queue 이름</span>\n        <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//sqs.ap<span class=\"token punctuation\">-</span>northeast<span class=\"token punctuation\">-</span>2.amazonaws.com/xxxx/MyQueue.fifo <span class=\"token comment\"># 생성한 SQS 큐 url</span></code></pre></div>\n<p>application.yml 에 aws 관련 정보를 기재해 준다.</p>\n<h3 id=\"-sqs-configuration-클래스-생성\" style=\"position:relative;\"><a href=\"#-sqs-configuration-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%83%9D%EC%84%B1\" aria-label=\" sqs configuration 클래스 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🖊 SQS Configuration 클래스 생성</h3>\n<ul>\n<li>application.yml에 있는 access-key, secret-key 값을 가지고 AWSCredentialsProvider 빈 생성</li>\n<li>Message 송신에 사용되는 AmazonSQS 빈 생성 시 해당 credentials 정보와 region 정보 설정</li>\n<li>Message 수신시 사용되는 Listener 관련 설정</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AmazonSqsConfig</span> <span class=\"token punctuation\">{</span>\n\n\t <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${cloud.aws.credentials.access-key}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> accessKey<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${cloud.aws.credentials.secret-key}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> secretKey<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${cloud.aws.region.static}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> region<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/**\n     * sqs 접근을 위한 위한 사용자 bean\n     */</span>\n    <span class=\"token annotation punctuation\">@Primary</span>\n\t<span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">AmazonSQSAsync</span> <span class=\"token function\">amazonSQSAws</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">BasicAWSCredentials</span> awsCreds <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BasicAWSCredentials</span><span class=\"token punctuation\">(</span>accessKey<span class=\"token punctuation\">,</span> secretKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">AmazonSQSAsyncClientBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">standard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">withRegion</span><span class=\"token punctuation\">(</span>region<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">withCredentials</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">AWSStaticCredentialsProvider</span><span class=\"token punctuation\">(</span>awsCreds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\t\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>AmazonSQSAsyncClientBuilder 를통해 접근 정보를 만들어 준다.</p>\n<h3 id=\"-메세지-dto-생성\" style=\"position:relative;\"><a href=\"#-%EB%A9%94%EC%84%B8%EC%A7%80-dto-%EC%83%9D%EC%84%B1\" aria-label=\" 메세지 dto 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🖌 메세지 Dto 생성</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token annotation punctuation\">@Setter</span>\n<span class=\"token annotation punctuation\">@JsonIgnoreProperties</span><span class=\"token punctuation\">(</span>ignoreUnknown <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EcmDto</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token annotation punctuation\">@NotEmpty</span><span class=\"token punctuation\">(</span>message <span class=\"token operator\">=</span> <span class=\"token string\">\"ecmId값이 빈값입니다.\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> ecmId<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>자신이 메세지를 보낼방식으로 작성하면 된다.</p>\n<h3 id=\"-메세지-전달-서비스-생성\" style=\"position:relative;\"><a href=\"#-%EB%A9%94%EC%84%B8%EC%A7%80-%EC%A0%84%EB%8B%AC-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%83%9D%EC%84%B1\" aria-label=\" 메세지 전달 서비스 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📤 메세지 전달 서비스 생성</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AmazonSQSSenderImpl</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">SendMessageResult</span> <span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EcmDto</span> message<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">JsonProcessingException</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AmazonSQSSender</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AmazonSQSSenderImpl</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${cloud.aws.sqs.queue.url}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> url<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ObjectMapper</span> objectMapper<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">AmazonSQS</span> amazonSQS<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SendMessageResult</span> <span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EcmDto</span> msg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">JsonProcessingException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">SendMessageRequest</span> sendMessageRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SendMessageRequest</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span>\n                objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">writeValueAsString</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">withMessageGroupId</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sqs-test\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">withMessageDeduplicationId</span><span class=\"token punctuation\">(</span>UUID<span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> amazonSQS<span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span>sendMessageRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>SQS에 메세지 보내는 로직을 정의한다.</p>\n<h3 id=\"-테스트용-controller-생성\" style=\"position:relative;\"><a href=\"#-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%9A%A9-controller-%EC%83%9D%EC%84%B1\" aria-label=\" 테스트용 controller 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📫 테스트용 Controller 생성</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainController</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">AmazonSQSSenderImpl</span> amazonSQSSender<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/send\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">EcmDto</span> message<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">JsonProcessingException</span> <span class=\"token punctuation\">{</span>\n        amazonSQSSender<span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"-포스트-맨을-통한-메세지-송신-테스트\" style=\"position:relative;\"><a href=\"#-%ED%8F%AC%EC%8A%A4%ED%8A%B8-%EB%A7%A8%EC%9D%84-%ED%86%B5%ED%95%9C-%EB%A9%94%EC%84%B8%EC%A7%80-%EC%86%A1%EC%8B%A0-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\" 포스트 맨을 통한 메세지 송신 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📈 포스트 맨을 통한 메세지 송신 테스트</h3>\n<p>아래와 같이 요청한다.</p>\n<p><img src=\"/4747485a5915e79b2301573a15bd14db/sqs2.png\" alt=\"sqs2.PNG\"></p>\n<p>sqs 콘솔에서 메세지 폴링해보면 내가 보낸 메세지가 있는걸 확인 할수 있다.\n<img src=\"/667e99292c0db52290559874112ed54a/sqs3.png\" alt=\"sqs3.PNG\"></p>\n<h3 id=\"-메세지-수신-listener-생성\" style=\"position:relative;\"><a href=\"#-%EB%A9%94%EC%84%B8%EC%A7%80-%EC%88%98%EC%8B%A0-listener-%EC%83%9D%EC%84%B1\" aria-label=\" 메세지 수신 listener 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📥 메세지 수신 Listener 생성</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AwsSqsListener</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token annotation punctuation\">@SqsListener</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"${cloud.aws.sqs.queue.name}\"</span><span class=\"token punctuation\">,</span> deletionPolicy <span class=\"token operator\">=</span> <span class=\"token class-name\">SqsMessageDeletionPolicy</span><span class=\"token punctuation\">.</span>NEVER<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Payload</span> <span class=\"token class-name\">String</span> info<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Headers</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> headers<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Acknowledgment</span> ack<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------------------------------start SqsListener\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------------------------------info {}\"</span><span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------------------------------headers {}\"</span><span class=\"token punctuation\">,</span> headers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//수신후 삭제처리</span>\n\t\tack<span class=\"token punctuation\">.</span><span class=\"token function\">acknowledge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>메세지 리스너 작성을 해준다.</p>\n<h3 id=\"-포스트-맨을-통한-메세지-수신-테스트\" style=\"position:relative;\"><a href=\"#-%ED%8F%AC%EC%8A%A4%ED%8A%B8-%EB%A7%A8%EC%9D%84-%ED%86%B5%ED%95%9C-%EB%A9%94%EC%84%B8%EC%A7%80-%EC%88%98%EC%8B%A0-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\" 포스트 맨을 통한 메세지 수신 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📉 포스트 맨을 통한 메세지 수신 테스트</h3>\n<p>아래와 같이 다시 요청한다.</p>\n<p><img src=\"/4747485a5915e79b2301573a15bd14db/sqs2.png\" alt=\"sqs2.PNG\"></p>\n<p>아래처럼 내가 방금 보낸 메세지를 확인할 수 있다.</p>\n<p><img src=\"/f3dddaf2d1fdab6a8c27b0f957acaea9/sqs4.png\" alt=\"sqs4.PNG\"></p>\n<h2 id=\"-마무리\" style=\"position:relative;\"><a href=\"#-%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\" 마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📢 마무리</h2>\n<p>이처럼 springboot에서 sqs에 접근 후 메세지를 보내고 받는기능을 구현해 보았다.</p>\n<p>같은 vpc내의 컨테이너끼리 메세지를 주고받기 굉장히 편한 기능같다.</p>\n<p>실제로 내가 진행한 프로젝트에서도 컨테이너간 간단한 메세지 전송에 사용되었다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EA%B0%9C%EC%9A%94\">👀 개요</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%8B%A4%EC%8A%B5\">📖 실습</a></p>\n<ul>\n<li><a href=\"#-%EB%8C%80%EA%B8%B0%EC%97%B4-%EC%83%9D%EC%84%B1\">💼 대기열 생성</a></li>\n<li><a href=\"#-%ED%95%84%EC%88%98-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\">🖋 필수 설정하기</a></li>\n<li><a href=\"#-sqs-configuration-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%83%9D%EC%84%B1\">🖊 SQS Configuration 클래스 생성</a></li>\n<li><a href=\"#-%EB%A9%94%EC%84%B8%EC%A7%80-dto-%EC%83%9D%EC%84%B1\">🖌 메세지 Dto 생성</a></li>\n<li><a href=\"#-%EB%A9%94%EC%84%B8%EC%A7%80-%EC%A0%84%EB%8B%AC-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%83%9D%EC%84%B1\">📤 메세지 전달 서비스 생성</a></li>\n<li><a href=\"#-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%9A%A9-controller-%EC%83%9D%EC%84%B1\">📫 테스트용 Controller 생성</a></li>\n<li><a href=\"#-%ED%8F%AC%EC%8A%A4%ED%8A%B8-%EB%A7%A8%EC%9D%84-%ED%86%B5%ED%95%9C-%EB%A9%94%EC%84%B8%EC%A7%80-%EC%86%A1%EC%8B%A0-%ED%85%8C%EC%8A%A4%ED%8A%B8\">📈 포스트 맨을 통한 메세지 송신 테스트</a></li>\n<li><a href=\"#-%EB%A9%94%EC%84%B8%EC%A7%80-%EC%88%98%EC%8B%A0-listener-%EC%83%9D%EC%84%B1\">📥 메세지 수신 Listener 생성</a></li>\n<li><a href=\"#-%ED%8F%AC%EC%8A%A4%ED%8A%B8-%EB%A7%A8%EC%9D%84-%ED%86%B5%ED%95%9C-%EB%A9%94%EC%84%B8%EC%A7%80-%EC%88%98%EC%8B%A0-%ED%85%8C%EC%8A%A4%ED%8A%B8\">📉 포스트 맨을 통한 메세지 수신 테스트</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EB%A7%88%EB%AC%B4%EB%A6%AC\">📢 마무리</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"March 24, 2022","title":"AWS SQS + SPRING BOOT 사용법","categories":"SpringBoot","author":"쩡기","emoji":"👖"},"fields":{"slug":"/gatsby-springboot-study-sqs/"}},"prev":{"id":"f63feec1-87c5-5411-b100-3a264e3d3969","html":"<h2 id=\"-efs-실습\" style=\"position:relative;\"><a href=\"#-efs-%EC%8B%A4%EC%8A%B5\" aria-label=\" efs 실습 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎈 EFS 실습</h2>\n<p>AWS EFS를 생성하여 EC2에 마운트하여 파일이 공유되는지 확인해 보자.</p>\n<h3 id=\"-efs-생성하기\" style=\"position:relative;\"><a href=\"#-efs-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0\" aria-label=\" efs 생성하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎆 EFS 생성하기</h3>\n<p>EFS 콘솔 접속 -> 파일 시스템 생성 클릭</p>\n<p>이름 : my-efs</p>\n<p>마운트할 EC2 인스턴스와 같은 VPC 선택</p>\n<blockquote>\n<p>나는 이전에 ec2 인스턴스를 2개 생성해 놨다.</p>\n</blockquote>\n<p><img src=\"/e504943a85143397effc9e4a01307f63/efs2.png\" alt=\"efs2.PNG\"></p>\n<p>my-efs 클릭하여 세부 정보 보기</p>\n<p>생성된 efs 의 전용 보안그룹이 필요하다.</p>\n<p>새로운 보안 그룹을 생성해준다.</p>\n<p><img src=\"/b9b6acf570492d5160b506b8be862115/efs3.png\" alt=\"efs3.PNG\"></p>\n<p><img src=\"/fed3b5d309699b85f80e6599bb092700/efs4.png\" alt=\"efs4.PNG\"></p>\n<blockquote>\n<p>vpc는 나의 ec2와 같은 vpc로 잡아주면 된다</p>\n</blockquote>\n<p>다시 내가 생성한 efs 파일시스템 세부정보 보기를 클릭후</p>\n<p>네트워크 탭에서 관리 버튼 글릭후 보안 그룹을 내가 생성한 그룹으로 바꿔준다.</p>\n<p><img src=\"/1ad0ee892b27b36dbacd0a315eb3e137/efs5.png\" alt=\"efs5.PNG\"></p>\n<p><img src=\"/55cddf0ae0a9a61be361efdfd65b216d/efs6.png\" alt=\"efs6.PNG\"></p>\n<h3 id=\"-efs-파일-시스템---마운트-방법재부팅-하면-마운트-해제됨\" style=\"position:relative;\"><a href=\"#-efs-%ED%8C%8C%EC%9D%BC-%EC%8B%9C%EC%8A%A4%ED%85%9C---%EB%A7%88%EC%9A%B4%ED%8A%B8-%EB%B0%A9%EB%B2%95%EC%9E%AC%EB%B6%80%ED%8C%85-%ED%95%98%EB%A9%B4-%EB%A7%88%EC%9A%B4%ED%8A%B8-%ED%95%B4%EC%A0%9C%EB%90%A8\" aria-label=\" efs 파일 시스템   마운트 방법재부팅 하면 마운트 해제됨 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎇 EFS 파일 시스템 - 마운트 방법(재부팅 하면 마운트 해제됨)</h3>\n<p>생성한 파일 시스템을 선택한 후에</p>\n<p><img src=\"/e504943a85143397effc9e4a01307f63/efs2.png\" alt=\"efs2.PNG\"></p>\n<p>연결 버튼을 클릭한다.</p>\n<p><img src=\"/63a9de79ef96d24a04d7c0f86900dc9d/efs7.png\" alt=\"efs7.PNG\"></p>\n<p>연결 버튼을 누르면 인스턴스에 탑재하는 명령어가 나온다.</p>\n<p>나의 경우에는 EFS 탑재 헬퍼를 사용해 마운트를 진행한다.</p>\n<p><img src=\"/c048d82ad3db425f19c7d04d3e00df73/efs8.png\" alt=\"efs8.PNG\"></p>\n<p>이제 탑재를 진핼할 EC2에 접속한다.</p>\n<p>탑재 헬퍼를 사용하려면 amazon-efs-utils 패키지를 설치해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//설치명령어\nsudo yum install -y amazon-efs-utils</code></pre></div>\n<p>mkdir /data 명령어를 이용해 data 폴더를 마운트 지점으로 하겠습니다.</p>\n<p>해당 폴더로 이동한뒤 위에서 복사한 탑재 헬퍼를 이용한 마운트 명령어를 붙여넣기 합니다.</p>\n<p><img src=\"/fcf25fd63e724ee8a1e398d8a60ecae4/efs9.png\" alt=\"efs9.PNG\"></p>\n<p>또다른 EC2 인스턴스에서도 같은 과정을 진행합니다.</p>\n<p>2번째 인스턴스에서는 탑재지점을 efs로 지정했습니다.</p>\n<p>2번째 인스턴스에 탑재된 efs 경로에 테스트용 파일을 하나 생성해준다.</p>\n<p><img src=\"/b801bea6bc18455522276e5337d52e3e/efs10.png\" alt=\"efs10.PNG\"></p>\n<p>2번째 인스턴스에 만든 파일이 1번째 인스턴스 한테도 공유된걸 확인할수 있다.</p>\n<p><img src=\"/f98930106f5ac81d871bbaf54b7461ec/efs11.png\" alt=\"efs11.PNG\"></p>\n<h3 id=\"-efs-파일-시스템---자동-마운트-방법재부팅해도-마운트-유지\" style=\"position:relative;\"><a href=\"#-efs-%ED%8C%8C%EC%9D%BC-%EC%8B%9C%EC%8A%A4%ED%85%9C---%EC%9E%90%EB%8F%99-%EB%A7%88%EC%9A%B4%ED%8A%B8-%EB%B0%A9%EB%B2%95%EC%9E%AC%EB%B6%80%ED%8C%85%ED%95%B4%EB%8F%84-%EB%A7%88%EC%9A%B4%ED%8A%B8-%EC%9C%A0%EC%A7%80\" aria-label=\" efs 파일 시스템   자동 마운트 방법재부팅해도 마운트 유지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✨ EFS 파일 시스템 - 자동 마운트 방법(재부팅해도 마운트 유지)</h3>\n<ol>\n<li>편집기를 통해 /etc/fstab 파일을 열어준다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">sudo vi /etc/fstab</code></pre></div>\n<ol start=\"2\">\n<li>자동 탑재 명령어를 이용해, /data를 마운트 지점으로 해서 명령어를 입력합니다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">file-system-id:/ 'efs-mount-point' efs _netdev,tls 0 0</code></pre></div>\n<ul>\n<li>_netdev 옵션은 네트워크에 연결 후 마운트하라는 옵션입니다. 이렇게 해야 시스템 시작 시 문제 없이 해당 네트워크 경로로 자동 마운트 됩니다.</li>\n</ul>\n<p>_netdev이 빠진 경우 EC2 인스턴스가 응답을 중지합니다.</p>\n<h2 id=\"-마무리\" style=\"position:relative;\"><a href=\"#-%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\" 마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🧨 마무리</h2>\n<p>이렇게 해서, EFS 파일 시스테 생성 및 마운트를 해봤다.</p>\n<p>로컬에서 해당 인스턴스에 접근하여 EFS에 파일을 올리는 방법은 무엇이 있을까?</p>\n<p>해당 부분을 좀더 공부해 봐야겠다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-efs-%EC%8B%A4%EC%8A%B5\">🎈 EFS 실습</a></p>\n<ul>\n<li><a href=\"#-efs-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0\">🎆 EFS 생성하기</a></li>\n<li><a href=\"#-efs-%ED%8C%8C%EC%9D%BC-%EC%8B%9C%EC%8A%A4%ED%85%9C---%EB%A7%88%EC%9A%B4%ED%8A%B8-%EB%B0%A9%EB%B2%95%EC%9E%AC%EB%B6%80%ED%8C%85-%ED%95%98%EB%A9%B4-%EB%A7%88%EC%9A%B4%ED%8A%B8-%ED%95%B4%EC%A0%9C%EB%90%A8\">🎇 EFS 파일 시스템 - 마운트 방법(재부팅 하면 마운트 해제됨)</a></li>\n<li><a href=\"#-efs-%ED%8C%8C%EC%9D%BC-%EC%8B%9C%EC%8A%A4%ED%85%9C---%EC%9E%90%EB%8F%99-%EB%A7%88%EC%9A%B4%ED%8A%B8-%EB%B0%A9%EB%B2%95%EC%9E%AC%EB%B6%80%ED%8C%85%ED%95%B4%EB%8F%84-%EB%A7%88%EC%9A%B4%ED%8A%B8-%EC%9C%A0%EC%A7%80\">✨ EFS 파일 시스템 - 자동 마운트 방법(재부팅해도 마운트 유지)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EB%A7%88%EB%AC%B4%EB%A6%AC\">🧨 마무리</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"March 28, 2022","title":"AWS Elastic File System(EFS) 마운트","categories":"AWS","author":"쩡기","emoji":"🧥"},"fields":{"slug":"/gatsby-aws-study-efs-tuto/"}},"site":{"siteMetadata":{"siteUrl":"https://leesungki.github.io","comments":{"utterances":{"repo":"LeeSungKi/leesungki.github.io"}}}}},"pageContext":{"slug":"/gatsby-aws-study-efs/","nextSlug":"/gatsby-springboot-study-sqs/","prevSlug":"/gatsby-aws-study-efs-tuto/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}