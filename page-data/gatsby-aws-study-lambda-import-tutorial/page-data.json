{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/gatsby-aws-study-lambda-import-tutorial/",
    "result": {"data":{"cur":{"id":"5646d063-e1bf-5b91-8f3c-9941d1512d37","html":"<h2 id=\"-lambda-layers의-핵심\" style=\"position:relative;\"><a href=\"#-lambda-layers%EC%9D%98-%ED%95%B5%EC%8B%AC\" aria-label=\" lambda layers의 핵심 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎈 Lambda Layers의 핵심?</h2>\n<p><strong>“Lambda에 코드 만들어 올릴 때 매번 패키지(pip 패키지 등) 세트 만들어 올리는거 귀찮았지? 같은 Dependency 가지는 함수라면 코드만 따로 빼고 의존성 패키지는 Layers라는 곳으로 빼서 사용해!”</strong></p>\n<p>즉, 굉장히 편리해진 요소가 추가된 것이죠. 그렇다면 Layers는 어떻게 동작할까요?</p>\n<blockquote>\n<p>✅ 람다 사용을 위해 간단한 예제를 통한 실습을 해보자.</p>\n</blockquote>\n<h2 id=\"튜토리얼\" style=\"position:relative;\"><a href=\"#%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC\" aria-label=\"튜토리얼 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🍕튜토리얼</h2>\n<h3 id=\"lambda-layers는-어떻게-사용하나요\" style=\"position:relative;\"><a href=\"#lambda-layers%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%82%98%EC%9A%94\" aria-label=\"lambda layers는 어떻게 사용하나요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lambda Layers는 어떻게 사용하나요?</h3>\n<h3>Lambda 함수로 만들 코드 작성하기</h3>\n<p>아주아주 간단하고 심플한 크롤링 코드를 Lambda에 올려 사용한다고 가정해봅시다. 해당 코드는 requests와 bs4라는 모듈을 사용합니다.\r\n이 블로그를 긁어 h1태그 하나의 글자를 가져와봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">import</span> json\r\n<span class=\"token keyword\">import</span> requests\r\n\r\n<span class=\"token keyword\">from</span> bs4 <span class=\"token keyword\">import</span> BeautifulSoup <span class=\"token keyword\">as</span> bs\r\n\r\n<span class=\"token keyword\">def</span> <span class=\"token function\">lambda_handler</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token comment\"># TODO implement</span>\r\n    res <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://github.com/LeeSungKi'</span><span class=\"token punctuation\">)</span>\r\n    soup <span class=\"token operator\">=</span> bs<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">,</span> <span class=\"token string\">'html.parser'</span><span class=\"token punctuation\">)</span>\r\n    blog_title <span class=\"token operator\">=</span> soup<span class=\"token punctuation\">.</span>select_one<span class=\"token punctuation\">(</span><span class=\"token string\">'h1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>text\r\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token string\">'statusCode'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token string\">'body'</span><span class=\"token punctuation\">:</span> json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>blog_title<span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만 아무런 준비 없이 AWS Lambda 콘솔에서 위 코드를 저장하고 실행하면 아래와 같은 No module named ‘requests’ 에러가 납니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Response:\r\n{\r\n  \"errorMessage\": \"Unable to import module 'lambda_function'\"\r\n}\r\n\r\n...\r\n\r\nUnable to import module 'lambda_function': No module named 'requests'</code></pre></div>\n<p>위 에러 메시지는 requests라는 모듈을 찾을 수 없다는 파이썬 에러입니다. 당연히 설치되어있지 않기 때문에 에러가 발생합니다. Lambda Layers를 이용해 이 이슈를 해결해봅시다.</p>\n<h3>크롤링 의존 패키지들 Lambda Layers로 만들기</h3>\n<p>이제 AWS Lambda Console을 켜 줍시다. Lambda 서비스 항목 중 “계층” 혹은 Layers를 누르고 “계층 생성”을 눌러줍시다.</p>\n<p><img src=\"/463e22d35d47026d5c0e64cf5f8545ef/layers1.png\" alt=\"layers1.PNG\"></p>\n<p>아래와 같이 새로운 Lambda Layer를 생성하는 창이 뜹니다.</p>\n<p><img src=\"/153ff4068a8edb6d223f74faa2ae1e0c/layers2.png\" alt=\"layers2.PNG\"></p>\n<p>이제 requests와 bs4가 들어있는 zip 압축파일을 업로드해야 하는데요, 크롤링을 위한 패키지가 아래 Github Repo에 준비되어 있습니다. 아래 Direct Download 링크를 통해 pack.zip파일을 받아 업로드 해주세요.</p>\n<blockquote>\n<p>Github Repo: <a href=\"https://github.com/LeeSungKi/OpenSearchApp/blob/main/pack.zip\">https://github.com/LeeSungKi/OpenSearchApp/blob/main/pack.zip</a></p>\n</blockquote>\n<ul>\n<li>requests + bs4 + lxml + requests_aws4auth</li>\n</ul>\n<p>그리고 Runtime으로 python3.7/python3.8를 선택해 줍시다. (여러분이 Layer를 만들때는 해당 Layer가 사용될 환경을 모두 선택해주세요.)</p>\n<p>업로드가 성공하면 아래와 같이 새로운 Lambda Layer가 생성됩니다. 참고로 각각의 Layer는 버전별로 수정이 불가능하고 만약 수정이 필요하다면 zip파일을 다시 올리고 새로운 리비전이 생성됩니다.</p>\n<p><img src=\"/c73ceb1547312f5ea1d0f59c6bfdfb03/layers3.png\" alt=\"layers3.PNG\"></p>\n<h3>Lambda Function 생성 + Layers 붙이기</h3>\n<p>내가 만들어놓은 testLayer 라는 람다에 layers를 추가해 보겠다.</p>\n<p>생성한 람다에 들어가면 아래에 계층이라는 부분에 Add A Layer 클릭한다.</p>\n<p><img src=\"/c4fd070af2e6b4772082dcacf3864dab/layers4.png\" alt=\"layers4.PNG\"></p>\n<p>아래와 같이 내가 만든 계층을 추가해 준다.</p>\n<p><img src=\"/35ba1b1b0cc212bc47ed83f7bdced859/layers5.png\" alt=\"layers5.PNG\"></p>\n<p>아래와 같이 Layers가 추가된걸 확인 할수 있다.</p>\n<p><img src=\"/2813dfea7f1e7b6e1b75b0b32e0e8bbc/layers6.png\" alt=\"layers6.PNG\"></p>\n<p>이제 Test 버튼을 눌러보자</p>\n<p>아래처럼 에러없이 크롤링 되는것을 알수 있다.</p>\n<p><img src=\"/81ea7134e65711c44e130ee6fe3286a0/layers7.png\" alt=\"layers7.PNG\"></p>\n<p>파이썬은 기본적으로 현재 폴더, 그리고 실행하는 파이썬이 참고하는 PYTHON PATH들을 참고해 여러 패키지와 라이브러리를 import합니다.\r\nLambda Layers가 압축 해제된 /opt폴더는 해당 PATH에 들어있지 않아 import할 때 Python이 탐색하는 대상에 포함되지 않습니다.\r\n대신, 우리가 방금 다운받은 패키지지 안의 python 폴더가 /opt/python에 압축이 해제되고 해당 폴더는 PYTHONPATH 환경변수 내에 포함되게 됩니다.</p>\n<h3 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌭마무리</h3>\n<p>이번 글에서는 굉장히 가벼운 패키지들만 사용했지만</p>\n<p>AWS Lambda의 ‘250MB’ 크기 제약은 여전히 “한 함수의 소스코드 크기 + Layers 크기 합”으로 되어있기 때문에 Layer를 쪼개더라도 총 합이 ‘250MB’로 걸린다는 점은 아쉽습니다.</p>\n<p>다만 일상적인 수정이 필요한 경우, 그리고 Proof of concept 같은 상황에서 Lambda 환경을 테스트하기 위해서는 이 글에서 소개한 AWS Lambda Layers를 적극 활용해 보는 것이 좋을 것 같습니다.</p>\n<br>\r\n<br>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-lambda-layers%EC%9D%98-%ED%95%B5%EC%8B%AC\">🎈 Lambda Layers의 핵심?</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC\">🍕튜토리얼</a></p>\n<ul>\n<li><a href=\"#lambda-layers%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%82%98%EC%9A%94\">Lambda Layers는 어떻게 사용하나요?</a></li>\n<li><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\">🌭마무리</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"🎈 Lambda Layers의 핵심? “Lambda에 코드 만들어 올릴 때 매번 패키지(pip 패키지 등) 세트 만들어 올리는거 귀찮았지? 같은 Dependency 가지는 함수라면 코드만 따로 빼고 의존성 패키지는 Layers라는 곳으로 빼서 사용해!” 즉, 굉장히 편리해진 요소가 추가된 것이죠. 그렇다면 Layers는 어떻게 동작할까요? ✅ 람다 사용을 위해 간단한 예제를 통한 실습을 해보자. 🍕튜토리얼 Lambda Layers는 어떻게 사용하나요? 아주아주 간단하고 심플한 크롤링 코드를 Lambda에 올려 사용한다고 가정해봅시다. 해당 코드는 requests와 bs4라는 모듈을 사용합니다.\r\n이 블로그를 긁어 h1태그 하나의 글자를 가져와봅시다. 하지만 아무런 준비 없이 AWS Lambda 콘솔에서 위 코드를 저장하고 실행하면 아래와 같은 No module named ‘requests’ 에러가 납니다. 위 에러 메시지는 requests라는 모듈을 찾을 수 없다는 파이썬 에러입니…","frontmatter":{"date":"March 21, 2022","title":"Lambda Layers 사용하기","categories":"AWS","author":"쩡기","emoji":"🚀"},"fields":{"slug":"/gatsby-aws-study-lambda-import-tutorial/"}},"next":{"id":"77e44115-66ac-56f1-871a-acebcfc7632f","html":"<h2 id=\"-개요\" style=\"position:relative;\"><a href=\"#-%EA%B0%9C%EC%9A%94\" aria-label=\" 개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✅ 개요</h2>\n<p>AWS 의 OpenSearch에 접근하여 데이터를 생성해보자.</p>\n<blockquote>\n<p>Aws OpenSearch(Elasticsearch) 관련 포스팅은 <a href=\"https://leesungki.github.io/gatsby-aws-history-of-opensearch-tuto\">여기</a>를 참고하자</p>\n</blockquote>\n<h3 id=\"aws-opensearch-연동\" style=\"position:relative;\"><a href=\"#aws-opensearch-%EC%97%B0%EB%8F%99\" aria-label=\"aws opensearch 연동 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AWS OpenSearch 연동</h3>\n<p>기본 프로젝트 구조</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">infra\r\n    ㄴaws\r\n        ㄴAWSRequestSigningApacheInterceptor\r\ncontroller\r\n    ㄴDataCheckController        </code></pre></div>\n<ol>\n<li>의존성 추가</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">dependencies {    \r\n    implementation group: 'org.opensearch.client', name: 'opensearch-rest-high-level-client', version: '1.2.4'\r\n}</code></pre></div>\n<ol start=\"2\">\n<li>AWSRequestSigningApacheInterceptor 추가</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">/**\r\n * An {@link HttpRequestInterceptor} that signs requests using any AWS {@link Signer}\r\n * and {@link AWSCredentialsProvider}.\r\n */</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AWSRequestSigningApacheInterceptor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">HttpRequestInterceptor</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\">/**\r\n     * The service that we're connecting to. Technically not necessary.\r\n     * Could be used by a future Signer, though.\r\n     */</span>\r\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> service<span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token comment\">/**\r\n     * The particular signer implementation.\r\n     */</span>\r\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Signer</span> signer<span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token comment\">/**\r\n     * The source of AWS credentials for signing.\r\n     */</span>\r\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">AWSCredentialsProvider</span> awsCredentialsProvider<span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token comment\">/**\r\n     *\r\n     * @param service service that we're connecting to\r\n     * @param signer particular signer implementation\r\n     * @param awsCredentialsProvider source of AWS credentials for signing\r\n     */</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">AWSRequestSigningApacheInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> service<span class=\"token punctuation\">,</span>\r\n                                              <span class=\"token keyword\">final</span> <span class=\"token class-name\">Signer</span> signer<span class=\"token punctuation\">,</span>\r\n                                              <span class=\"token keyword\">final</span> <span class=\"token class-name\">AWSCredentialsProvider</span> awsCredentialsProvider<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>service <span class=\"token operator\">=</span> service<span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>signer <span class=\"token operator\">=</span> signer<span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>awsCredentialsProvider <span class=\"token operator\">=</span> awsCredentialsProvider<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token comment\">/**\r\n     * {@inheritDoc}\r\n     */</span>\r\n    <span class=\"token annotation punctuation\">@Override</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">HttpRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">HttpContext</span> context<span class=\"token punctuation\">)</span>\r\n            <span class=\"token keyword\">throws</span> <span class=\"token class-name\">HttpException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\">URIBuilder</span> uriBuilder<span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\r\n            uriBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URIBuilder</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getRequestLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getUri</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">URISyntaxException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid URI\"</span> <span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n\r\n        <span class=\"token comment\">// Copy Apache HttpRequest to AWS DefaultRequest</span>\r\n        <span class=\"token class-name\">DefaultRequest</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> signableRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultRequest</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>service<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n        <span class=\"token class-name\">HttpHost</span> host <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpHost</span><span class=\"token punctuation\">)</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span>HTTP_TARGET_HOST<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>host <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            signableRequest<span class=\"token punctuation\">.</span><span class=\"token function\">setEndpoint</span><span class=\"token punctuation\">(</span>URI<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">.</span><span class=\"token function\">toURI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">HttpMethodName</span> httpMethod <span class=\"token operator\">=</span>\r\n                <span class=\"token class-name\">HttpMethodName</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromValue</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getRequestLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        signableRequest<span class=\"token punctuation\">.</span><span class=\"token function\">setHttpMethod</span><span class=\"token punctuation\">(</span>httpMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\r\n            signableRequest<span class=\"token punctuation\">.</span><span class=\"token function\">setResourcePath</span><span class=\"token punctuation\">(</span>uriBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRawPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">URISyntaxException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid URI\"</span> <span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n\r\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>request <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">HttpEntityEnclosingRequest</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token class-name\">HttpEntityEnclosingRequest</span> httpEntityEnclosingRequest <span class=\"token operator\">=</span>\r\n                    <span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpEntityEnclosingRequest</span><span class=\"token punctuation\">)</span> request<span class=\"token punctuation\">;</span>\r\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>httpEntityEnclosingRequest<span class=\"token punctuation\">.</span><span class=\"token function\">getEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n                signableRequest<span class=\"token punctuation\">.</span><span class=\"token function\">setContent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ByteArrayInputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\r\n                signableRequest<span class=\"token punctuation\">.</span><span class=\"token function\">setContent</span><span class=\"token punctuation\">(</span>httpEntityEnclosingRequest<span class=\"token punctuation\">.</span><span class=\"token function\">getEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span>\r\n        <span class=\"token punctuation\">}</span>\r\n        signableRequest<span class=\"token punctuation\">.</span><span class=\"token function\">setParameters</span><span class=\"token punctuation\">(</span><span class=\"token function\">nvpToMapParams</span><span class=\"token punctuation\">(</span>uriBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">getQueryParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        signableRequest<span class=\"token punctuation\">.</span><span class=\"token function\">setHeaders</span><span class=\"token punctuation\">(</span><span class=\"token function\">headerArrayToMap</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getAllHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n        <span class=\"token comment\">// Sign it</span>\r\n        signer<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span>signableRequest<span class=\"token punctuation\">,</span> awsCredentialsProvider<span class=\"token punctuation\">.</span><span class=\"token function\">getCredentials</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n        <span class=\"token comment\">// Now copy everything back</span>\r\n        request<span class=\"token punctuation\">.</span><span class=\"token function\">setHeaders</span><span class=\"token punctuation\">(</span><span class=\"token function\">mapToHeaderArray</span><span class=\"token punctuation\">(</span>signableRequest<span class=\"token punctuation\">.</span><span class=\"token function\">getHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>request <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">HttpEntityEnclosingRequest</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token class-name\">HttpEntityEnclosingRequest</span> httpEntityEnclosingRequest <span class=\"token operator\">=</span>\r\n                    <span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpEntityEnclosingRequest</span><span class=\"token punctuation\">)</span> request<span class=\"token punctuation\">;</span>\r\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>httpEntityEnclosingRequest<span class=\"token punctuation\">.</span><span class=\"token function\">getEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n                <span class=\"token class-name\">BasicHttpEntity</span> basicHttpEntity <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BasicHttpEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                basicHttpEntity<span class=\"token punctuation\">.</span><span class=\"token function\">setContent</span><span class=\"token punctuation\">(</span>signableRequest<span class=\"token punctuation\">.</span><span class=\"token function\">getContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                httpEntityEnclosingRequest<span class=\"token punctuation\">.</span><span class=\"token function\">setEntity</span><span class=\"token punctuation\">(</span>basicHttpEntity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span>\r\n        <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token comment\">/**\r\n     *\r\n     * @param params list of HTTP query params as NameValuePairs\r\n     * @return a multimap of HTTP query params\r\n     */</span>\r\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">nvpToMapParams</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">NameValuePair</span><span class=\"token punctuation\">></span></span> params<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> parameterMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span>CASE_INSENSITIVE_ORDER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NameValuePair</span> nvp <span class=\"token operator\">:</span> params<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> argsList <span class=\"token operator\">=</span>\r\n                    parameterMap<span class=\"token punctuation\">.</span><span class=\"token function\">computeIfAbsent</span><span class=\"token punctuation\">(</span>nvp<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> k <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            argsList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nvp<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n        <span class=\"token keyword\">return</span> parameterMap<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token comment\">/**\r\n     * @param headers modeled Header objects\r\n     * @return a Map of header entries\r\n     */</span>\r\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">headerArrayToMap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">Header</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> headers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> headersMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span>CASE_INSENSITIVE_ORDER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Header</span> header <span class=\"token operator\">:</span> headers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">skipHeader</span><span class=\"token punctuation\">(</span>header<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n                headersMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>header<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> header<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span>\r\n        <span class=\"token punctuation\">}</span>\r\n        <span class=\"token keyword\">return</span> headersMap<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token comment\">/**\r\n     * @param header header line to check\r\n     * @return true if the given header should be excluded when signing\r\n     */</span>\r\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">skipHeader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">Header</span> header<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"content-length\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span>header<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n                <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>header<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Strip Content-Length: 0</span>\r\n                <span class=\"token operator\">||</span> <span class=\"token string\">\"host\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span>header<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Host comes from endpoint</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token comment\">/**\r\n     * @param mapHeaders Map of header entries\r\n     * @return modeled Header objects\r\n     */</span>\r\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Header</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">mapToHeaderArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> mapHeaders<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\">Header</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> headers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Header</span><span class=\"token punctuation\">[</span>mapHeaders<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> headerEntry <span class=\"token operator\">:</span> mapHeaders<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            headers<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BasicHeader</span><span class=\"token punctuation\">(</span>headerEntry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> headerEntry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n        <span class=\"token keyword\">return</span> headers<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"https://github.com/amazon-archives/aws-request-signing-apache-interceptor\">참고</a></p>\n<ol start=\"3\">\n<li>DataCheckController</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Slf4j</span>\r\n<span class=\"token annotation punctuation\">@RestController</span>\r\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/v1\"</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DataCheckController</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\">/**\r\n     * aws 가용 지역\r\n     */</span>\r\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${cloud.aws.region.static}\"</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> region<span class=\"token punctuation\">;</span><span class=\"token comment\">//ap-northeast-2 서울리전</span>\r\n\r\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/search1\"</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">search1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\r\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------------------------------------->search1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">RestHighLevelClient</span> searchClient <span class=\"token operator\">=</span> <span class=\"token function\">searchClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n        <span class=\"token comment\">// Create the document as a hash map</span>\r\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> document <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        document<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Walk the Line\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        document<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"director\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"James Mangold\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        document<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"year\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2005\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------------------------------------->Map\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n        <span class=\"token comment\">// Form the indexing request, send it, and print the response</span>\r\n        <span class=\"token class-name\">IndexRequest</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IndexRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my-index\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"_doc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">source</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">IndexResponse</span> response <span class=\"token operator\">=</span> searchClient<span class=\"token punctuation\">.</span><span class=\"token function\">index</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestOptions</span><span class=\"token punctuation\">.</span>DEFAULT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"response=========>\"</span><span class=\"token operator\">+</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"response Result=========>\"</span><span class=\"token operator\">+</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">getIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> serviceName <span class=\"token operator\">=</span> <span class=\"token string\">\"es\"</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> host <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// e.g. https://search-mydomain.us-west-1.es.amazonaws.com 앤드포인트</span>\r\n\r\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">AWSCredentialsProvider</span> credentialsProvider <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultAWSCredentialsProviderChain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RestHighLevelClient</span> <span class=\"token function\">searchClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------------------------------------->RestHighLevelClient\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">AWS4Signer</span> signer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AWS4Signer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        signer<span class=\"token punctuation\">.</span><span class=\"token function\">setServiceName</span><span class=\"token punctuation\">(</span>serviceName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        signer<span class=\"token punctuation\">.</span><span class=\"token function\">setRegionName</span><span class=\"token punctuation\">(</span>region<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">HttpRequestInterceptor</span> interceptor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AWSRequestSigningApacheInterceptor</span><span class=\"token punctuation\">(</span>serviceName<span class=\"token punctuation\">,</span> signer<span class=\"token punctuation\">,</span> credentialsProvider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RestHighLevelClient</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RestClient</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpHost</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setHttpClientConfigCallback</span><span class=\"token punctuation\">(</span>hacb <span class=\"token operator\">-></span> hacb<span class=\"token punctuation\">.</span><span class=\"token function\">addInterceptorLast</span><span class=\"token punctuation\">(</span>interceptor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>   \r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"4\">\n<li>포스트맨 호출</li>\n</ol>\n<p><img src=\"/1c399e99d3045f45524e33758357817b/sbes1.png\" alt=\"sbes1.PNG\"></p>\n<ol start=\"5\">\n<li>키바나 확인</li>\n</ol>\n<p><img src=\"/d6c68d61e4c9a5620163f5436167349d/sbes2.png\" alt=\"sbes2.PNG\"></p>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌭마무리</h2>\n<p>위와 같이 springboot에서 OpenSearch(Elasticsearch)에 인덱스를 생성해주었고 확인까지 할수 있었다.</p>\n<p>다음에는 OpenSearch(Elasticsearch)를 활용한 간단한 애플리케이션을 만들어 보자.</p>\n<br>\r\n<br>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EA%B0%9C%EC%9A%94\">✅ 개요</a></p>\n<ul>\n<li><a href=\"#aws-opensearch-%EC%97%B0%EB%8F%99\">AWS OpenSearch 연동</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\">🌭마무리</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"March 15, 2022","title":"Spring Boot + Aws OpenSearch(Elasticsearch) 연동","categories":"SpringBoot","author":"쩡기","emoji":"🧙‍♂️"},"fields":{"slug":"/springbootStudyOpensearch/"}},"prev":{"id":"0cfa4c34-7f05-52cb-9297-bbfa16d351a6","html":"<h2 id=\"-개요\" style=\"position:relative;\"><a href=\"#-%EA%B0%9C%EC%9A%94\" aria-label=\" 개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✅ 개요</h2>\n<p>AWS 의 OpenSearch를 사용하여 간단한 Serverless 검색 애플리케이션을 생성해보자</p>\n<p>Amazon API Gateway로 사용자를 OpenSearch API 및 AWS Lambda의 하위 집합으로 제한하여 API Gateway에서 OpenSearch Service로 보내는 요청에 서명하도록 구현 하겠다.</p>\n<blockquote>\n<p>Aws OpenSearch(Elasticsearch) 관련 포스팅은 <a href=\"https://leesungki.github.io/gatsby-aws-history-of-opensearch-tuto\">여기</a>를 참고하자</p>\n</blockquote>\n<h2 id=\"-1단계-샘플-데이터-인덱싱\" style=\"position:relative;\"><a href=\"#-1%EB%8B%A8%EA%B3%84-%EC%83%98%ED%94%8C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%9D%B8%EB%8D%B1%EC%8B%B1\" aria-label=\" 1단계 샘플 데이터 인덱싱 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🧀 1단계: 샘플 데이터 인덱싱</h2>\n<p>사전 조건은 OpenSearch Service 도메인입니다.\r\n<a href=\"https://leesungki.github.io/gatsby-aws-history-of-opensearch-tuto/\">이전 포스팅</a>을 참고하여 도메인은 만들어져 있다는 가정하에 진행 합니다.</p>\n<p><a href=\"https://github.com/LeeSungKi/OpenSearchApp/blob/main/sample-movies.zip\">sample-movies.zip</a>을 다운로드하여 압축을 해제하고 _bulk API를 사용해 5,000개 문서를 movies 인덱스에 추가합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">POST https://search-my-domain.us-west-1.es.amazonaws.com/_bulk //나의 오픈서치 도메인\r\n\r\n//sample-movies.zip파일\r\n{ \"index\": { \"_index\": \"movies\", \"_type\": \"movie\", \"_id\": \"tt1979320\" } }\r\n{\"directors\":[\"Ron Howard\"],\"release_date\":\"2013-09-02T00:00:00Z\",\"rating\":8.3,\"genres\":[\"Action\",\"Biography\",\"Drama\",\"Sport\"],\"image_url\":\"http://ia.media-imdb.com/images/M/MV5BMTQyMDE0MTY0OV5BMl5BanBnXkFtZTcwMjI2OTI0OQ@@._V1_SX400_.jpg\",\"plot\":\"A re-creation of the merciless 1970s rivalry between Formula One rivals James Hunt and Niki Lauda.\",\"title\":\"Rush\",\"rank\":2,\"running_time_secs\":7380,\"actors\":[\"Daniel Brühl\",\"Chris Hemsworth\",\"Olivia Wilde\"],\"year\":2013,\"id\":\"tt1979320\",\"type\":\"add\"}\r\n{ \"index\": { \"_index\": \"movies\", \"_type\": \"movie\", \"_id\": \"tt1951264\" } }\r\n{\"directors\":[\"Francis Lawrence\"],\"release_date\":\"2013-11-11T00:00:00Z\",\"genres\":[\"Action\",\"Adventure\",\"Sci-Fi\",\"Thriller\"],\"image_url\":\"http://ia.media-imdb.com/images/M/MV5BMTAyMjQ3OTAxMzNeQTJeQWpwZ15BbWU4MDU0NzA1MzAx._V1_SX400_.jpg\",\"plot\":\"Katniss Everdeen and Peeta Mellark become targets of the Capitol after their victory in the 74th Hunger Games sparks a rebellion in the Districts of Panem.\",\"title\":\"The Hunger Games: Catching Fire\",\"rank\":4,\"running_time_secs\":8760,\"actors\":[\"Jennifer Lawrence\",\"Josh Hutcherson\",\"Liam Hemsworth\"],\"year\":2013,\"id\":\"tt1951264\",\"type\":\"add\"}\r\n...       </code></pre></div>\n<br>\r\n키바나 콘솔 에서 데이터 확인\r\n<br>\r\n<br>\n<p><img src=\"/1de1a9f95da82394b1f2cf4fc29c86a5/estuto1.png\" alt=\"estuto1.PNG\"></p>\n<h2 id=\"-2단계-api-gateway에서-api-생성\" style=\"position:relative;\"><a href=\"#-2%EB%8B%A8%EA%B3%84-api-gateway%EC%97%90%EC%84%9C-api-%EC%83%9D%EC%84%B1\" aria-label=\" 2단계 api gateway에서 api 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🥨 2단계: API Gateway에서 API 생성</h2>\n<p>API Gateway를 사용하면 보다 제한된 API를 생성하고 OpenSearch _search API와의 상호 작용을 간소화할 수 있습니다. API Gateway를 사용하면 Amazon Cognito 인증 및 요청 조절 같은 보안 기능을 활성화할 수도 있습니다. API를 생성하고 배포하려면 다음 단계를 수행합니다.</p>\n<h3 id=\"api-생성-및-구성\" style=\"position:relative;\"><a href=\"#api-%EC%83%9D%EC%84%B1-%EB%B0%8F-%EA%B5%AC%EC%84%B1\" aria-label=\"api 생성 및 구성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>API 생성 및 구성</h3>\n<p>API Gateway 콘솔을 사용하여 API를 생성하려면</p>\n<ol>\n<li>API Gateway 내에서 API 생성(Create API)을 선택합니다.</li>\n</ol>\n<br>\n<p><img src=\"/f38546d98d8a46aef04667bfdbb6eb23/estuto2.png\" alt=\"estuto2.PNG\">\r\n<br></p>\n<ol start=\"2\">\n<li>REST API(비공개 아님)를 찾고 구축(Build)를 선택합니다.</li>\n</ol>\n<br>\n<p><img src=\"/d69ebf6e1b94082cf43fe4875e35f9b3/estuto3.png\" alt=\"estuto3.PNG\">\r\n<br></p>\n<ol start=\"3\">\n<li>다음 필드를 구성합니다.</li>\n</ol>\n<br>\n<p><img src=\"/1f4977437640b3c7294c8870c33b5cfe/estuto4.png\" alt=\"estuto4.PNG\"></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- API 이름: OpenSearch-api\r\n- 설명: Amazon OpenSearch Service API\r\n- 엔드포인트 유형: 리전별</code></pre></div>\n<br>\n<ol start=\"4\">\n<li>API 생성(Create API)을 선택합니다.</li>\n</ol>\n<br>\n<ol start=\"5\">\n<li>작업(Actions) 및 메서드 생성(Create Method)을 선택합니다.</li>\n</ol>\n<br>\n<p><img src=\"/fc89e55d7b6d475844bf1500caf35458/estuto5.png\" alt=\"estuto5.PNG\">\r\n<br></p>\n<ol start=\"6\">\n<li>드롭다운에서 GET을 선택하고 확인 표시를 클릭하여 확인합니다.</li>\n</ol>\n<br>\n<ol start=\"7\">\n<li>다음 설정을 구성한 다음 저장(Save)을 선택합니다.</li>\n</ol>\n<br>\n<p><img src=\"/5e973e943c271132f7f6d17e154e7f73/estuto6.png\" alt=\"estuto6.PNG\"></p>\n<table>\n<thead>\n<tr>\n<th>설정</th>\n<th>값</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>통합 유형</td>\n<td>Lambda 함수</td>\n</tr>\n<tr>\n<td>Lambda 프록시 통합 사용</td>\n<td>예</td>\n</tr>\n<tr>\n<td>Lambda 리전</td>\n<td>ap-northeast-2</td>\n</tr>\n<tr>\n<td>Lambda 함수</td>\n<td>opensearch-lambda</td>\n</tr>\n<tr>\n<td>기본 제한 시간 사용</td>\n<td>예</td>\n</tr>\n</tbody>\n</table>\n<br>\t\n<h3 id=\"메서드-요청-구성\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EC%84%9C%EB%93%9C-%EC%9A%94%EC%B2%AD-%EA%B5%AC%EC%84%B1\" aria-label=\"메서드 요청 구성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메서드 요청 구성</h3>\n<p>메서드 요청(Method Request)을 선택하고 다음 설정을 구성합니다.\r\n<br></p>\n<p><img src=\"/22c57b077a560957ad2823875ee104ea/estuto7.png\" alt=\"estuto7.PNG\"></p>\n<table>\n<thead>\n<tr>\n<th>설정</th>\n<th>값</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>승인</td>\n<td>NONE</td>\n</tr>\n<tr>\n<td>요청 검사기</td>\n<td>쿼리 문자열 파라미터 및 헤더 검사</td>\n</tr>\n<tr>\n<td>필수 API 키</td>\n<td>false</td>\n</tr>\n</tbody>\n</table>\n<br>\n<p>URL 쿼리 문자열 파라미터\r\n<br></p>\n<table>\n<thead>\n<tr>\n<th>설정</th>\n<th>값</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>이름</td>\n<td>q</td>\n</tr>\n<tr>\n<td>필수</td>\n<td>예</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"api-배포-및-단계-구성\" style=\"position:relative;\"><a href=\"#api-%EB%B0%B0%ED%8F%AC-%EB%B0%8F-%EB%8B%A8%EA%B3%84-%EA%B5%AC%EC%84%B1\" aria-label=\"api 배포 및 단계 구성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>API 배포 및 단계 구성</h3>\n<p>API Gateway 콘솔에서 배포를 생성하고 새 단계 또는 기존 단계에 연결하여 API를 배포할 수 있습니다.\r\n<br></p>\n<ol>\n<li>작업(Actions) 및 API 배포(Deploy API)를 선택합니다.</li>\n</ol>\n<br>\n<p><img src=\"/d8390b31d2b5b1e42c0d15e1ba06fd45/estuto8.png\" alt=\"estuto8.PNG\">\r\n<br></p>\n<ol start=\"2\">\n<li>배포 단계(Deployment stage)에서 새 단계(New Stage)를 클릭하고 단계 이름을 opensearch-api-test로 지정합니다.</li>\n</ol>\n<br>\n<ol start=\"3\">\n<li>배포(Deploy)를 선택합니다.</li>\n</ol>\n<br>\n<p><img src=\"/d9abe088bac4567aa74b81f65d523512/estuto9.png\" alt=\"estuto9.PNG\">\r\n<br></p>\n<ol start=\"4\">\n<li>단계 편집기에서 다음 설정을 구성한 다음 변경 내용 저장(Save Changes)을 선택합니다.</li>\n</ol>\n<br>\n<p><img src=\"/ffe5a5cd85378070b1c39ddf4a128016/estuto10.png\" alt=\"estuto10.PNG\"></p>\n<table>\n<thead>\n<tr>\n<th>설정</th>\n<th>값</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>조절 활성화</td>\n<td>예</td>\n</tr>\n<tr>\n<td>요율</td>\n<td>1000</td>\n</tr>\n<tr>\n<td>버스트</td>\n<td>500</td>\n</tr>\n</tbody>\n</table>\n<br>\r\n이러한 설정은 엔드포인트 루트에 대한 GET 요청 (https://some-id.execute-api.ap-northeast-2.amazonaws.com/search-es-api-test) 메서드 하나뿐인 API를 구성합니다.\n<p>이 요청에는 파라미터 하나(q), 즉 검색할 쿼리 문자열이 필요합니다.</p>\n<p>메서드를 호출하면 요청이 Lambda로 전송되어 opensearch-lambda 함수가 실행됩니다.</p>\n<h2 id=\"-3단계-lambda-함수-생성-및-배포\" style=\"position:relative;\"><a href=\"#-3%EB%8B%A8%EA%B3%84-lambda-%ED%95%A8%EC%88%98-%EC%83%9D%EC%84%B1-%EB%B0%8F-%EB%B0%B0%ED%8F%AC\" aria-label=\" 3단계 lambda 함수 생성 및 배포 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🍔 3단계: Lambda 함수 생성 및 배포</h2>\n<p>API Gateway에서 API를 생성한 후 요청을 전달하는 Lambda 함수를 만듭니다.</p>\n<h3 id=\"lambda-함수-생성\" style=\"position:relative;\"><a href=\"#lambda-%ED%95%A8%EC%88%98-%EC%83%9D%EC%84%B1\" aria-label=\"lambda 함수 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lambda 함수 생성</h3>\n<p>API Gateway가 요청을 다음 Python 3.8 Lambda 함수로 전달합니다, 그러면 이 함수가 OpenSearch Service를 쿼리하고 결과를 반환합니다. 이 함수의 이름을 opensearch-lambda로 지정합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">import</span> boto3\r\n<span class=\"token keyword\">import</span> json\r\n<span class=\"token keyword\">import</span> requests\r\n<span class=\"token keyword\">from</span> requests_aws4auth <span class=\"token keyword\">import</span> AWS4Auth\r\n\r\nregion <span class=\"token operator\">=</span> <span class=\"token string\">'ap-northeast-2'</span> <span class=\"token comment\"># For example</span>\r\nservice <span class=\"token operator\">=</span> <span class=\"token string\">'opensearchservice'</span>\r\ncredentials <span class=\"token operator\">=</span> boto3<span class=\"token punctuation\">.</span>Session<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>get_credentials<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\nawsauth <span class=\"token operator\">=</span> AWS4Auth<span class=\"token punctuation\">(</span>credentials<span class=\"token punctuation\">.</span>access_key<span class=\"token punctuation\">,</span> credentials<span class=\"token punctuation\">.</span>secret_key<span class=\"token punctuation\">,</span> region<span class=\"token punctuation\">,</span> service<span class=\"token punctuation\">,</span> session_token<span class=\"token operator\">=</span>credentials<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">)</span>\r\n\r\nhost <span class=\"token operator\">=</span> <span class=\"token string\">''</span> <span class=\"token comment\"># 자신의 OpenSearch domain endpoint</span>\r\nindex <span class=\"token operator\">=</span> <span class=\"token string\">'movies'</span>\r\nurl <span class=\"token operator\">=</span> host <span class=\"token operator\">+</span> <span class=\"token string\">'/'</span> <span class=\"token operator\">+</span> index <span class=\"token operator\">+</span> <span class=\"token string\">'/_search'</span>\r\n\r\n<span class=\"token comment\"># Lambda execution starts here</span>\r\n<span class=\"token keyword\">def</span> <span class=\"token function\">lambda_handler</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n\r\n    <span class=\"token comment\"># Put the user query into the query DSL for more accurate search results.</span>\r\n    <span class=\"token comment\"># Note that certain fields are boosted (^).</span>\r\n    query <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token string\">\"size\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token string\">\"query\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token string\">\"multi_match\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\r\n                <span class=\"token string\">\"query\"</span><span class=\"token punctuation\">:</span> event<span class=\"token punctuation\">[</span><span class=\"token string\">'queryStringParameters'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'q'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n                <span class=\"token string\">\"fields\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"title^4\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"plot^2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"actors\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"directors\"</span><span class=\"token punctuation\">]</span>\r\n            <span class=\"token punctuation\">}</span>\r\n        <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token comment\"># Elasticsearch 6.x requires an explicit Content-Type header</span>\r\n    headers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"application/json\"</span> <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token comment\"># Make the signed HTTP request</span>\r\n    r <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> auth<span class=\"token operator\">=</span>awsauth<span class=\"token punctuation\">,</span> headers<span class=\"token operator\">=</span>headers<span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span>json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n\r\n    <span class=\"token comment\"># Create the response and add some extra content to support CORS</span>\r\n    response <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token string\">\"statusCode\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token string\">\"headers\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token string\">\"Access-Control-Allow-Origin\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'*'</span>\r\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token string\">\"isBase64Encoded\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">False</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token comment\"># Add the search results to the response</span>\r\n    response<span class=\"token punctuation\">[</span><span class=\"token string\">'body'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>text\r\n    <span class=\"token keyword\">return</span> response</code></pre></div>\n<p>이 샘플 함수는 외부 라이브러리를 사용하므로 코드가 작동하려면 배포 패키지를 생성하고 Lambda에 업로드해야 합니다.</p>\n<p>Lambda 함수 및 배포 패키지를 만드는 방법에 대한 자세한 내용은 <a href=\"https://leesungki.github.io/gatsby-aws-study-lambda-import-tutorial\">Lambda Layers 사용하기</a>를 참고 하세요.</p>\n<h3 id=\"핸들러-수정\" style=\"position:relative;\"><a href=\"#%ED%95%B8%EB%93%A4%EB%9F%AC-%EC%88%98%EC%A0%95\" aria-label=\"핸들러 수정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>핸들러 수정</h3>\n<p>핸들러는 이벤트를 처리하는 함수 코드의 메서드입니다. Lambda 함수가 있는 배포 패키지의 파일 이름에 따라 핸들러 이름을 변경해야 합니다.\r\n예를 들어, 파일 이름이 function.py인 경우 핸들러 이름을 function.lambda_handler로 변경합니다.</p>\n<p><img src=\"/8b42fb82f95c9fb139d79f97d8124f5b/estuto11.png\" alt=\"estuto11.PNG\"></p>\n<h3 id=\"트리거-구성\" style=\"position:relative;\"><a href=\"#%ED%8A%B8%EB%A6%AC%EA%B1%B0-%EA%B5%AC%EC%84%B1\" aria-label=\"트리거 구성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>트리거 구성</h3>\n<p>트리거 추가(Add trigger)를 선택하고 함수를 호출하는 HTTP 엔드포인트를 생성합니다. 트리거 구성은 다음과 같아야 합니다.</p>\n<table>\n<thead>\n<tr>\n<th>트리거</th>\n<th>API</th>\n<th>배포 단계</th>\n<th>보안</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>API Gateway</td>\n<td>OpenSearch-api</td>\n<td>OpenSearch-api-test</td>\n<td>열기</td>\n</tr>\n</tbody>\n</table>\n<p>아래처럼 추가 된다.</p>\n<p><img src=\"/a1e64625063f9f7c654d2d574da4d441/estuto12.png\" alt=\"estuto12.PNG\"></p>\n<h2 id=\"-4단계-도메인-액세스-정책-수정\" style=\"position:relative;\"><a href=\"#-4%EB%8B%A8%EA%B3%84-%EB%8F%84%EB%A9%94%EC%9D%B8-%EC%95%A1%EC%84%B8%EC%8A%A4-%EC%A0%95%EC%B1%85-%EC%88%98%EC%A0%95\" aria-label=\" 4단계 도메인 액세스 정책 수정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🥞 4단계: 도메인 액세스 정책 수정</h2>\n<p>OpenSearch Service 도메인에서 Lambda 함수가 movies 인덱스에 GET 요청을 수행할 수 있도록 허용해야 합니다. 다음 정책은 opensearch-lambda-role(Lambda를 통해 생성됨)에 movies 인덱스에 대한 액세스를 제공합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\r\n  <span class=\"token property\">\"Version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2012-10-17\"</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token property\">\"Statement\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\r\n    <span class=\"token punctuation\">{</span>\r\n      <span class=\"token property\">\"Effect\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Allow\"</span><span class=\"token punctuation\">,</span>\r\n      <span class=\"token property\">\"Principal\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token property\">\"AWS\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"arn:aws:iam::123456789012:role/service-role/opensearch-lambda-role-1abcdefg\"</span> <span class=\"token comment\">//예시</span>\r\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n      <span class=\"token property\">\"Action\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"es:ESHttpGet\"</span><span class=\"token punctuation\">,</span>\r\n      <span class=\"token property\">\"Resource\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"arn:aws:es:us-west-1:123456789012:domain/domain-name/movies/_search\"</span> <span class=\"token comment\">//예시</span>\r\n    <span class=\"token punctuation\">}</span>\r\n  <span class=\"token punctuation\">]</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>Lambda가 자동으로 생성하는 역할의 정확한 이름을 얻으려면 AWS Identity and Access Management(IAM) 콘솔로 이동아혀 역할(Roles)을 클릭하고 “lambda”를 검색합니다.</p>\n</blockquote>\n<h2 id=\"-5단계-웹-애플리케이션-테스트\" style=\"position:relative;\"><a href=\"#-5%EB%8B%A8%EA%B3%84-%EC%9B%B9-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\" 5단계 웹 애플리케이션 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🥗 5단계: 웹 애플리케이션 테스트</h2>\n<p>웹 애플리케이션을 테스트하려면</p>\n<ol>\n<li>\n<p><a href=\"https://github.com/LeeSungKi/OpenSearchApp/blob/main/sample-site.zip\">sample-site.zip</a>을 다운로드하고 압축을 해제하여 자주 사용하는 텍스트 편집기에서 scripts/search.js를 엽니다.</p>\n</li>\n<li>\n<p>apigatewayendpoint 변수를 업데이트하여 API Gateway 엔드포인트를 가리키도록 합니다. 엔드포인트의 형식은 <a href=\"https://some-id.execute-api.ap-northeast-2.amazonaws.com/opensearch-api-test%EC%9E%85%EB%8B%88%EB%8B%A4\">https://some-id.execute-api.ap-northeast-2.amazonaws.com/opensearch-api-test입니다</a>.</p>\n</li>\n<li>\n<p>index.html을 열고 thor, house 등 몇 가지 단어를 검색해 봅니다.</p>\n</li>\n</ol>\n<p><img src=\"/e1cca3fb8f998b5e9e7e5fde4098ceca/estuto14.png\" alt=\"estuto14.PNG\"></p>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌭마무리</h2>\n<p>이렇게 오픈서치를 활용하여 Serverless 애플리케이션을 만들어 보았다.</p>\n<p>간단한거 같지만 aws 서비스에 대한 어느정도의 이해도가 필요하다 생각한다.</p>\n<p>이전 게시글들을 읽어보면 충분히 따라올수 있는 부분이라 생각한다.</p>\n<p>aws 를 접하면서 정말 필요하고 편리한 서비스라는 생각을 다시한번 하게되었다.</p>\n<br>\r\n<br>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EA%B0%9C%EC%9A%94\">✅ 개요</a></p>\n</li>\n<li>\n<p><a href=\"#-1%EB%8B%A8%EA%B3%84-%EC%83%98%ED%94%8C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%9D%B8%EB%8D%B1%EC%8B%B1\">🧀 1단계: 샘플 데이터 인덱싱</a></p>\n</li>\n<li>\n<p><a href=\"#-2%EB%8B%A8%EA%B3%84-api-gateway%EC%97%90%EC%84%9C-api-%EC%83%9D%EC%84%B1\">🥨 2단계: API Gateway에서 API 생성</a></p>\n<ul>\n<li><a href=\"#api-%EC%83%9D%EC%84%B1-%EB%B0%8F-%EA%B5%AC%EC%84%B1\">API 생성 및 구성</a></li>\n<li><a href=\"#%EB%A9%94%EC%84%9C%EB%93%9C-%EC%9A%94%EC%B2%AD-%EA%B5%AC%EC%84%B1\">메서드 요청 구성</a></li>\n<li><a href=\"#api-%EB%B0%B0%ED%8F%AC-%EB%B0%8F-%EB%8B%A8%EA%B3%84-%EA%B5%AC%EC%84%B1\">API 배포 및 단계 구성</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-3%EB%8B%A8%EA%B3%84-lambda-%ED%95%A8%EC%88%98-%EC%83%9D%EC%84%B1-%EB%B0%8F-%EB%B0%B0%ED%8F%AC\">🍔 3단계: Lambda 함수 생성 및 배포</a></p>\n<ul>\n<li><a href=\"#lambda-%ED%95%A8%EC%88%98-%EC%83%9D%EC%84%B1\">Lambda 함수 생성</a></li>\n<li><a href=\"#%ED%95%B8%EB%93%A4%EB%9F%AC-%EC%88%98%EC%A0%95\">핸들러 수정</a></li>\n<li><a href=\"#%ED%8A%B8%EB%A6%AC%EA%B1%B0-%EA%B5%AC%EC%84%B1\">트리거 구성</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-4%EB%8B%A8%EA%B3%84-%EB%8F%84%EB%A9%94%EC%9D%B8-%EC%95%A1%EC%84%B8%EC%8A%A4-%EC%A0%95%EC%B1%85-%EC%88%98%EC%A0%95\">🥞 4단계: 도메인 액세스 정책 수정</a></p>\n</li>\n<li>\n<p><a href=\"#-5%EB%8B%A8%EA%B3%84-%EC%9B%B9-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%ED%85%8C%EC%8A%A4%ED%8A%B8\">🥗 5단계: 웹 애플리케이션 테스트</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\">🌭마무리</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"March 22, 2022","title":"OpenSearch 검색 애플리케이션 생성","categories":"AWS","author":"쩡기","emoji":"🔍"},"fields":{"slug":"/gatsby-aws-study-opensearch-tuto/"}},"site":{"siteMetadata":{"siteUrl":"https://leesungki.github.io","comments":{"utterances":{"repo":"LeeSungKi/leesungki.github.io"}}}}},"pageContext":{"slug":"/gatsby-aws-study-lambda-import-tutorial/","nextSlug":"/springbootStudyOpensearch/","prevSlug":"/gatsby-aws-study-opensearch-tuto/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}