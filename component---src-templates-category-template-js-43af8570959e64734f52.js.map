{"version":3,"file":"component---src-templates-category-template-js-43af8570959e64734f52.js","mappings":"+JAkCA,IA9Bc,SAAC,GAAqB,IAAnBA,EAAmB,EAAnBA,IAAQC,GAAW,YAC5BC,GAAOC,EAAAA,EAAAA,gBAAb,cAiBMC,GAAQC,EAAAA,EAAAA,UAAQ,kBAAMH,EAAA,mBAAuB,gBAAGI,EAAH,cAAcN,IAAQM,EAAtB,kBAA0C,CAAC,EAA9F,IAIA,MAAY,OAAO,KACnB,MAAiEF,EAAjE,KAAgBG,GAAhB,mCAAiCC,EAAjC,YACA,MAAIC,QADJ,aACA,EAGO,mCAAaC,MAAOH,EAApB,gBAAqDI,IAAKH,GAAjE,IAFS,qCAAKR,IAAL,EAAqBW,IAAKH,GAAjC,M,sHCjBJ,MATA,SAA4B,GAAqB,IAAnBI,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACnC,OACE,uBAAKC,UAAU,gCACb,uBAAKA,UAAU,uBADjB,GAEE,uBAAKA,UAAU,0BAHnB,K,UCoCF,MA/BA,SAA0B,GAAiB,IAAfC,EAAe,EAAfA,YAClBC,EAA2BD,EAAnC,MAAeE,EAAoBF,EAAnC,gBACQG,EAAeH,EAAvB,WACMI,GAAkBd,EAAAA,EAAAA,UACtB,kBAAMa,EAAA,WAAqB,mBAAcE,IAAd,OAC3B,CAACF,EAFH,IAIMG,EAAQL,EAAA,KAAU,gBAAGV,EAAH,cAAc,IAAI,EAAJ,EAAd,MAElBgB,GAAmBC,EAAAA,EAAAA,cACvB,cACE,OAAIC,EAAa,OAAOC,EAAAA,EAAAA,UAAP,WACjBA,EAAAA,EAAAA,UAAS,UAAUP,EAAnBO,MAEF,CALF,IAQA,OACE,yBACE,qBAAKb,MAAM,UACX,mBAAoBA,MAAOM,EAA3B,GAAwDL,SAAaQ,EAAL,kBAChE,qBACEK,SADF,EAEEC,SAFF,EAGEC,KAHF,EAIEP,MAAOA","sources":["webpack://leesungki/./src/components/image/index.js","webpack://leesungki/./src/components/category-page-header/index.js","webpack://leesungki/./src/templates/category-template.js"],"sourcesContent":["import React, { useMemo } from 'react';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport { GatsbyImage } from 'gatsby-plugin-image';\n\nconst Image = ({ src, ...rest }) => {\n  const data = useStaticQuery(graphql`\n    query {\n      images: allFile(filter: { sourceInstanceName: { eq: \"assets\" } }) {\n        edges {\n          node {\n            relativePath\n            extension\n            publicURL\n            childImageSharp {\n              gatsbyImageData(layout: CONSTRAINED)\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const match = useMemo(() => data.images.edges.find(({ node }) => src === node.relativePath), [\n    data,\n    src,\n  ]);\n  if (!match) return null;\n  const { node: { childImageSharp, publicURL, extension } = {} } = match;\n  if (extension === 'svg' || !childImageSharp) {\n    return <img src={publicURL} alt={publicURL} {...rest} />;\n  }\n  return <GatsbyImage image={childImageSharp.gatsbyImageData} alt={publicURL} {...rest} />;\n};\n\nexport default Image;\n","import React from 'react';\nimport './style.scss';\n\nfunction CategoryPageHeader({ title, subtitle }) {\n  return (\n    <div className=\"category-page-header-wrapper\">\n      <div className=\"category-page-title\">{title}</div>\n      <div className=\"category-page-subtitle\">{subtitle}</div>\n    </div>\n  );\n}\n\nexport default CategoryPageHeader;\n","import React, { useMemo, useCallback } from 'react';\nimport { navigate } from 'gatsby';\n\nimport Layout from '../layout';\nimport Seo from '../components/seo';\nimport Post from '../models/post';\nimport CategoryPageHeader from '../components/category-page-header';\nimport PostTabs from '../components/post-tabs';\n\nfunction CategoryTemplate({ pageContext }) {\n  const { edges, currentCategory } = pageContext;\n  const { categories } = pageContext;\n  const currentTabIndex = useMemo(\n    () => categories.findIndex((category) => category === currentCategory),\n    [categories, currentCategory],\n  );\n  const posts = edges.map(({ node }) => new Post(node));\n\n  const onTabIndexChange = useCallback(\n    (e, value) => {\n      if (value === 0) return navigate(`/posts`);\n      navigate(`/posts/${categories[value]}`);\n    },\n    [categories],\n  );\n\n  return (\n    <Layout>\n      <Seo title=\"Posts\" />\n      <CategoryPageHeader title={categories[currentTabIndex]} subtitle={`${posts.length} posts`} />\n      <PostTabs\n        tabIndex={currentTabIndex}\n        onChange={onTabIndexChange}\n        tabs={categories}\n        posts={posts}\n      />\n    </Layout>\n  );\n}\n\nexport default CategoryTemplate;\n"],"names":["src","rest","data","useStaticQuery","match","useMemo","node","childImageSharp","publicURL","extension","image","alt","title","subtitle","className","pageContext","edges","currentCategory","categories","currentTabIndex","category","posts","onTabIndexChange","useCallback","value","navigate","tabIndex","onChange","tabs"],"sourceRoot":""}